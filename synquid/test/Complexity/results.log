N/List-Null
null :: xs:List a -> {Bool|_v == (len xs == 0)}
null = \xs . 
  match xs with
    Nil -> true
    Cons x3 x4 -> false

(Goals: 2)
(Measures: 1)
(Spec size: 9)
(Solution size: 16)
(EC: 2)
(SC: 0)
C1/List-Elem
elem :: x:a -> xs:List a -> {Bool|_v == (x in elems xs)}
elem = \x . \xs . 
    match xs with
      Nil -> false
      Cons x3 x4 -> 
        if x3 == x
          then true
          else elem x x4

(Goals: 3)
(Measures: 2)
(Spec size: 9)
(Solution size: 41)
(EC: 105)
(SC: 0)
C1/List-Duplicate
stutter :: xs:List a -> {List a|len _v == 2 * len xs}
stutter = \xs . 
  match xs with
    Nil -> xs
    Cons x3 x4 -> Cons x3 (Cons x3
                             (stutter x4))

(Goals: 2)
(Measures: 1)
(Spec size: 10)
(Solution size: 26)
(EC: 48)
(SC: 7)
C1/List-Replicate
replicate :: n:Nat -> x:a -> {List a|len _v == n}
replicate = \n . \x . 
    if n <= 0
      then Nil
      else Cons x (replicate (dec n)
                     x)

(Goals: 2)
(Measures: 1)
(Spec size: 7)
(Solution size: 31)
(EC: 46)
(SC: 9)
C1/List-Append
append :: xs:List a -> ys:List a -> {List a|len _v == len xs + len ys}
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons x3 x4 -> Cons x3 (append x4
                               ys)

(Goals: 2)
(Measures: 1)
(Spec size: 11)
(Solution size: 25)
(EC: 165)
(SC: 25)
C1/List-Concat
concat :: xss:ListOfLists a -> {List a|len _v == sumLen xss}
concat = \xss . 
  match xss with
    Nil2 -> Nil
    Cons2 x3 x4 -> append x3 (concat
                                x4)

(Goals: 4)
(Measures: 3)
(Spec size: 14)
(Solution size: 46)
(EC: 43)
(SC: 9)
C1/List-Take
take :: n:Nat -> xs:{List a|len _v >= n} -> {List a|len _v == n}
take = \n . \xs . 
    if 0 != n
      then 
        match xs with
          Nil -> error
          Cons x3 x4 -> Cons x3 (take (dec
                                         n) x4)
      else Nil

(Goals: 2)
(Measures: 1)
(Spec size: 11)
(Solution size: 34)
(EC: 94)
(SC: 7)
C1/List-Drop
drop :: n:Nat -> xs:{List a|len _v >= n} -> {List a|len _v == len xs - n}
drop = \n . \xs . 
    if 0 != n
      then 
        match xs with
          Nil -> error
          Cons x3 x4 -> drop (dec n) x4
      else xs

(Goals: 2)
(Measures: 1)
(Spec size: 14)
(Solution size: 30)
(EC: 65)
(SC: 9)
C1/List-Delete
delete :: x:a -> xs:List a -> {List a|elems _v == elems xs - [x]}
delete = \x . \xs . 
    match xs with
      Nil -> xs
      Cons x3 x4 -> 
        if x3 == x
          then delete x x4
          else Cons x3 (delete x x4)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 49)
(EC: 67)
(SC: 0)
C1/List-Zip
zip :: xs:List a -> ys:{List b|len _v == len xs} -> {List Pair a b|len _v == len xs}
zip = \xs . \ys . 
    match xs with
      Nil -> Nil
      Cons x3 x4 -> 
        match ys with
          Nil -> error
          Cons x7 x8 -> Cons (Pair x3 x7)
                          (zip x4 x8)

(Goals: 2)
(Measures: 1)
(Spec size: 13)
(Solution size: 32)
(EC: 19)
(SC: 0)
C1/List-Ith
ith :: <p :: Int -> a -> Bool> . xs:List a <p> -> i:{Int|0 <= _v && _v < len xs} -> {a|p i _v}
ith = \xs . \i . 
    match xs with
      Nil -> error
      Cons x3 x4 -> 
        if i <= 0
          then x3
          else ith x4 (dec i)

(Goals: 2)
(Measures: 1)
(Spec size: 16)
(Solution size: 30)
(EC: 13)
(SC: 0)
C1/List-ElemIndex
elemIndex :: <p :: Int -> a -> Bool> . x:a -> xs:{List a <p>|x in elems _v} -> {Int|p _v x}
elemIndex = \x . \xs . 
    match xs with
      Nil -> error
      Cons x3 x4 -> 
        if x3 == x
          then zero
          else inc (elemIndex x x4)

(Goals: 3)
(Measures: 2)
(Spec size: 13)
(Solution size: 43)
(EC: 44)
(SC: 0)
C1/List-Snoc
snoc :: <p :: a -> a -> Bool> . x:a -> xs:List {a|p _v x} <p> -> {List a <p>|len _v == len xs + 1 && elems _v == elems xs + [x]}
snoc = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons x5 x6 -> Cons x5 (snoc x
                               x6)

(Goals: 3)
(Measures: 2)
(Spec size: 26)
(Solution size: 42)
(EC: 29)
(SC: 0)
C1/List-Reverse
reverse :: <p :: a -> a -> Bool> . xs:List a <p> -> {List a <p _1 _0>|len _v == len xs && elems _v == elems xs}
reverse = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> snoc x3 (reverse
                             x4)

(Goals: 3)
(Measures: 2)
(Spec size: 20)
(Solution size: 35)
(EC: 23)
(SC: 0)
C1/UniqueList-Insert
insert :: x:a -> xs:UList a -> {UList a|elems _v == elems xs + [x]}
insert = \x . \xs . 
    match xs with
      Nil -> Cons x xs
      Cons x5 x6 -> 
        if x5 == x
          then xs
          else Cons x5 (insert x x6)

(Goals: 3)
(Measures: 2)
(Spec size: 13)
(Solution size: 49)
(EC: 45)
(SC: 0)
C1/UniqueList-Delete
delete :: x:a -> xs:UList a -> {UList a|elems _v == elems xs - [x]}
delete = \x . \xs . 
    match xs with
      Nil -> xs
      Cons x3 x4 -> 
        if x3 == x
          then x4
          else Cons x3 (delete x x4)

(Goals: 3)
(Measures: 2)
(Spec size: 13)
(Solution size: 45)
(EC: 36)
(SC: 0)
C2/List-RemoveDub
nub :: xs:List a -> {UList a|elems _v == elems xs}
nub = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> 
      if elem x3 x4
        then nub x4
        else Cons x3 (nub x4)

(Goals: 3)
(Measures: 2)
(Spec size: 10)
(Solution size: 44)
(EC: 36)
(SC: 9)
C1/List-Compress
compress :: xs:List a -> {CList a|elems _v == elems xs}
compress = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> 
      match compress x4 with
        Nil -> Cons x3 Nil
        Cons x10 x11 -> 
          if x3 == x10
            then compress x4
            else Cons x3 (Cons x10 x11)

(Goals: 4)
(Measures: 3)
(Spec size: 11)
(Solution size: 62)
(EC: 357)
(SC: 99)
C1/UniqueList-Range
range :: size:Nat -> lo:Int -> {UList {Int|lo <= _v && _v <= lo + size}|len _v == size}
range = \size . \lo . 
    if size <= 0
      then Nil
      else Cons lo (range (dec size)
                      (inc lo))

(Goals: 3)
(Measures: 2)
(Spec size: 18)
(Solution size: 46)
(EC: 427)
(SC: 18)
C1/StrictIncList-Insert
insert :: x:a -> xs:IList a -> {IList a|ielems _v == ielems xs + [x]}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x5 < x
          then ICons x5 (insert x x6)
          else 
            if x < x5
              then ICons x (ICons x5 x6)
              else xs

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 64)
(EC: 81)
(SC: 0)
C1/StrictIncList-Delete
delete :: x:a -> xs:IList a -> {IList a|ielems _v == ielems xs - [x]}
delete = \x . \xs . 
    match xs with
      INil -> xs
      ICons x3 x4 -> 
        if x < x3
          then xs
          else 
            if x3 < x
              then ICons x3 (delete x x4)
              else x4

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 52)
(EC: 39)
(SC: 0)
C1/StrictIncList-Intersect
intersect :: xs:SList a -> ys:SList a -> {SList a|elems _v == elems xs * elems ys}
intersect = \xs . \ys . 
    match xs with
      Nil -> xs
      Cons x4 x5 -> 
        match ys with
          Nil -> ys
          Cons x8 x9 -> 
            if x4 < x8
              then intersect x5 ys
              else 
                if x8 < x4
                  then intersect xs x9
                  else Cons x4 (intersect x5 x9)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 63)
(EC: 96)
(SC: 0)
C1/insert(sorted)
insert :: x:a -> xs:IList a -> {IList a|ielems _v == ielems xs + [x]}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x5 <= x
          then ICons x5 (insert x x6)
          else ICons x (ICons x5 x6)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 57)
(EC: 105)
(SC: 0)
C2/List-InsertSort
insertSort :: xs:List a -> {IList a|ielems _v == elems xs && len xs == ilen _v}
insertSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> insert x3
                    (insertSort x4)

(Goals: 5)
(Measures: 4)
(Spec size: 17)
(Solution size: 59)
(EC: 33)
(SC: 0)
C1/List-ExtractMin
extractMin :: xs:{List a|len _v > 0} -> {MinPair a|elems xs == [min _v] + elems (rest _v) && len xs == 1 + len (rest _v)}
extractMin = \xs . 
  match xs with
    Nil -> error
    Cons x3 x4 -> 
      match x4 with
        Nil -> MinPair x3 Nil
        Cons x9 x10 -> 
          match extractMin x4 with
            MinPair x14 x15 -> 
              if x14 <= x3
                then MinPair x14 (Cons x3 x15)
                else MinPair x3 (Cons x14 x15)

(Goals: 5)
(Measures: 4)
(Spec size: 26)
(Solution size: 71)
(EC: 298)
(SC: 50)
C2/List-SelectSort
selectSort :: xs:List a -> {IList a|ielems _v == elems xs && len xs == ilen _v}
selectSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> 
      match extractMin xs with
        MinPair x8 x9 -> ICons x8
                           (selectSort x9)

(Goals: 7)
(Measures: 6)
(Spec size: 17)
(Solution size: 71)
(EC: 158)
(SC: 17)
C1/List-Split
split :: xs:List a -> {List a|abs (len xs - len _v * 2) <= 1}
split = \xs . 
  match xs with
    Nil -> xs
    Cons x3 x4 -> 
      match x4 with
        Nil -> x4
        Cons x7 x8 -> Cons x3 (split x8)

(Goals: 4)
(Measures: 3)
(Spec size: 13)
(Solution size: 33)
(EC: 161)
(SC: 62)
C1/IncList-Merge
merge :: xs:IList a -> ys:IList a -> {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
merge = \xs . \ys . 
    match ys with
      INil -> xs
      ICons x4 x5 -> 
        match xs with
          INil -> ys
          ICons x8 x9 -> 
            if x4 <= x8
              then ICons x4 (merge (ICons x8
                                      x9) x5)
              else ICons x8 (merge x9 (ICons
                                         x4 x5))

(Goals: 3)
(Measures: 2)
(Spec size: 20)
(Solution size: 64)
(EC: 573)
(SC: 35)
M/List-MergeSort
mergeSort :: xs:List a -> {IList a|ilen _v == len xs && ielems _v == elems xs}
mergeSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> 
      match x4 with
        Nil -> mergeSort xs
        Cons x8 x9 -> 
          match split x9 with
            Pair x13 x14 -> merge (mergeSort
                                     (Cons x3 x13)) (mergeSort (Cons
                                                                  x8 x14))

(Goals: 7)
(Measures: 6)
(Spec size: 17)
(Solution size: 86)
(EC: 28023)
(SC: 519)
C1/List-Partition
partition :: p:a -> xs:List a -> {Pair List {a|_v <= p} List {a|_v > p}|len (fst _v) + len (snd _v) == len xs && elems (fst _v) + elems (snd _v) == elems xs}
partition = \p . \xs . 
    match xs with
      Nil -> Pair Nil Nil
      Cons x5 x6 -> 
        match partition p x6 with
          Pair x11 x12 -> 
            if x5 <= p
              then Pair (Cons x5 x11) x12
              else Pair x11 (Cons x5 x12)

(Goals: 5)
(Measures: 4)
(Spec size: 30)
(Solution size: 71)
(EC: 434)
(SC: 25)
C1/IncList-PivotAppend
pivotAppend :: p:a -> xs:IList {a|_v <= p} -> ys:IList {a|_v > p} -> {IList a|ilen _v == (ilen xs + ilen ys) + 1 && ielems _v == (ielems xs + ielems ys) + [p]}
pivotAppend = \p . \xs . \ys . 
      match xs with
        INil -> ICons p ys
        ICons x5 x6 -> ICons x5
                         (pivotAppend p x6 ys)

(Goals: 3)
(Measures: 2)
(Spec size: 31)
(Solution size: 45)
(EC: 72)
(SC: 0)
C2/List-QuickSort
quickSort :: xs:List a -> {IList a|ilen _v == len xs && ielems _v == elems xs}
quickSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> 
      match partition x3 x4 with
        Pair x9 x10 -> pivotAppend x3
                         (quickSort x9) (quickSort x10)

(Goals: 7)
(Measures: 6)
(Spec size: 17)
(Solution size: 77)
(EC: 2278)
(SC: 136)
T/Tree-Elem
elem :: x:a -> t:Tree a -> {Bool|_v == (x in telems t)}
elem = \x . \t . 
    match t with
      Empty -> false
      Node x4 x5 x6 -> 
        if x4 == x
          then not false
          else or (elem x x5) (elem x x6)

(Goals: 3)
(Measures: 2)
(Spec size: 9)
(Solution size: 63)
(EC: 353)
(SC: 0)
T/Tree-Count
countNodes :: t:Tree a -> {Int|_v == size t}
countNodes = \t . 
  match t with
    Empty -> zero
    Node x4 x5 x6 -> plus one (plus
                                 (countNodes x5) (countNodes x6))

(Goals: 2)
(Measures: 1)
(Spec size: 7)
(Solution size: 34)
(EC: 401)
(SC: 0)
T/Tree-ToList
toList :: t:Tree a -> {List a|len _v == size t}
toList = \t . 
  match t with
    Empty -> Nil
    Node x4 x5 x6 -> Cons x4 (append
                                (toList x5) (toList x6))

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 45)
(EC: 311)
(SC: 0)
T/BST-Member
member :: x:a -> t:BST a -> {Bool|_v == (x in telems t)}
member = \x . \t . 
    match t with
      Empty -> false
      Node x4 x5 x6 -> 
        if (x <= x4) && (x4 <= x)
          then true
          else 
            if x <= x4
              then member x x5
              else member x x6

(Goals: 3)
(Measures: 2)
(Spec size: 9)
(Solution size: 72)
(EC: 20)
(SC: 0)
T/BST-Insert
insert :: x:a -> t:BST a -> {BST a|telems _v == telems t + [x]}
insert = \x . \t . 
    match t with
      Empty -> Node x Empty Empty
      Node x7 x8 x9 -> 
        if (x <= x7) && (x7 <= x)
          then t
          else 
            if x7 <= x
              then Node x7 x8 (insert x x9)
              else Node x7 (insert x x8) x9

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 90)
(EC: 243)
(SC: 45)
T/BST-Delete
delete :: t:BST a -> x:a -> {BST a|telems _v == telems t - [x]}
delete = \t . \x . 
    match t with
      Empty -> t
      Node x4 x5 x6 -> 
        if (x4 != x) && (x4 <= x)
          then Node x4 x5 (delete x6 x)
          else 
            if x4 != x
              then Node x4 (delete x5 x) x6
              else 
                match x5 with
                  Empty -> x6
                  Node x20 x21 x22 -> Node x20 x21
                                        (delete (Node x x22 x6) x4)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 103)
(EC: 702)
(SC: 429)
C2/BST-Sort
sort :: xs:List a -> {IList a|ielems _v == elems xs}
sort = \xs . flatten (toBST xs)

(Goals: 7)
(Measures: 6)
(Spec size: 14)
(Solution size: 90)
(EC: 24)
(SC: 31)
C1/BinHeap-Member
member :: x:a -> t:Heap a -> {Bool|_v == (x in elems t)}
member = \x . \t . 
    match t with
      Empty -> false
      Node x4 x5 x6 -> 
        if (x4 != x) && (x <= x4)
          then false
          else 
            if x <= x4
              then not false
              else or (member x x5) (member x
                                       x6)

(Goals: 3)
(Measures: 2)
(Spec size: 9)
(Solution size: 78)
(EC: 282)
(SC: 0)
C1/BinHeap-Insert
insert :: t:Heap a -> x:a -> {Heap a|elems _v == elems t + [x]}
insert = \t . \x . 
    match t with
      Empty -> Node x Empty Empty
      Node x7 x8 x9 -> 
        if (x <= x7) && (x7 <= x)
          then t
          else 
            if x7 <= x
              then Node x7 x8 (insert x9 x)
              else Node x x8 (insert x9 x7)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 90)
(EC: 192)
(SC: 36)
N/BinHeap-Singleton
singleton :: x:a -> {Heap a|elems _v == [x]}
singleton = \x . Node x Empty
                   Empty

(Goals: 3)
(Measures: 2)
(Spec size: 8)
(Solution size: 44)
(EC: 7)
(SC: 0)
N/BinHeap-Doubleton
doubleton :: x:a -> y:a -> {Heap a|elems _v == [x, y]}
doubleton = \x . \y . 
    if (x <= y) && (y <= x)
      then Node x Empty Empty
      else 
        if y <= x
          then Node y Empty (Node x Empty
                               Empty)
          else Node x Empty (Node y Empty
                               Empty)

(Goals: 3)
(Measures: 2)
(Spec size: 9)
(Solution size: 91)
(EC: 53)
(SC: 0)
N/BinHeap-Tripleton
tripleton :: x:a -> y:a -> z:a -> {Heap a|elems _v == [x, y, z]}
tripleton = \x . \y . \z . 
      if ((x <= y) && (y <= z)) && (z
                                      <= x)
        then Node x Empty Empty
        else 
          if (((z != y) && (x <= y)) && (y
                                           <= x)) && (y <= z)
            then Node y Empty (Node z Empty
                                 Empty)
            else 
              if (((y != x) && (x <= y)) && (x
                                               <= z)) && (z <= x)
                then Node x Empty (Node y Empty
                                     Empty)
                else 
                  if ((y <= z) && (z <= x)) && (z
                                                  <= y)
                    then Node z Empty (Node x Empty
                                         Empty)
                    else 
                      if (y <= x) && (y <= z)
                        then Node y (Node z Empty Empty)
                               (Node x Empty Empty)
                        else 
                          if (z <= x) && (z <= y)
                            then Node z (Node y Empty Empty)
                                   (Node x Empty Empty)
                            else Node x (Node y Empty Empty)
                                   (Node z Empty Empty)

(Goals: 3)
(Measures: 2)
(Spec size: 10)
(Solution size: 274)
(EC: 493)
(SC: 0)
N/AVL-RotateL
rotL0 :: x:a -> l:{AVL {a|_v < x}|balFac _v == 0} -> r:{AVL {a|_v > x}|realHeight l - realHeight _v == 2} -> {AVL a|realHeight _v == 1 + realHeight l && elems _v == ([x] + elems l) + elems r}
rotL0 = \x . \l . \r . 
      match l with
        Leaf -> error
        Node x5 x6 x7 x8 -> Node x5 x6
                              (Node x x7 r x8) (inc x8)

(Goals: 4)
(Measures: 3)
(Spec size: 39)
(Solution size: 85)
(EC: 173)
(SC: 55)
N/AVL-RotateR
rotR0 :: x:a -> l:AVL {a|_v < x} -> r:{AVL {a|_v > x}|realHeight _v - realHeight l == 2 && balFac _v == 0} -> {AVL a|realHeight _v == 1 + realHeight r && elems _v == ([x] + elems l) + elems r}
rotR0 = \x . \l . \r . 
      match r with
        Leaf -> error
        Node x5 x6 x7 x8 -> Node x5
                              (Node x l x6 x8) x7 (inc x8)

(Goals: 4)
(Measures: 3)
(Spec size: 40)
(Solution size: 85)
(EC: 486)
(SC: 145)
N/AVL-Balance
balance :: x:a -> l:AVL {a|_v < x} -> r:{AVL {a|_v > x}|isBal l _v 2} -> {AVL a|(balHt l r _v && bigHt l r _v) && elems _v == ([x] + elems l) + elems r}
balance = \x . \l . \r . 
      if (isSkewed l r) &&
           (isLeftHeavy l)
        then rotLL x l r
        else 
          if (isSkewed l r) &&
               (isRightHeavy l)
            then rotLR x l r
            else 
              if isSkewed l r
                then rotL0 x l r
                else 
                  if (isSkewed r l) &&
                       (isLeftHeavy r)
                    then rotRL x l r
                    else 
                      if (isSkewed r l) &&
                           (isRightHeavy r)
                        then rotRR x l r
                        else 
                          if isSkewed r l
                            then rotR0 x l r
                            else Node x l r (nodeHeight l r)

(Goals: 5)
(Measures: 4)
(Spec size: 37)
(Solution size: 183)
(EC: 288)
(SC: 136)
M/AVL-Insert
insert :: y:a -> t:AVL a -> {AVL a|(realHeight t <= realHeight _v && realHeight _v <= realHeight t + 1) && elems _v == [y] + elems t}
insert = \y . \t . 
    match t with
      Leaf -> balance y Leaf Leaf
      Node x8 x9 x10 x11 -> 
        if x8 < y
          then balance x8 x9 (insert y
                                x10)
          else 
            if y < x8
              then balance x8 (insert y x9)
                     x10
              else t

(Goals: 4)
(Measures: 3)
(Spec size: 25)
(Solution size: 106)
(EC: 317)
(SC: 35)
M/AVL-ExtractMin
extractMin :: t:AVL a -> {MinPair a|elems t == melems _v && eqOrOneLess (mheight _v) (realHeight t)}
extractMin = \t . 
  match t with
    Leaf -> Nothing
    Node x5 x6 x7 x8 -> 
      match extractMin x6 with
        Nothing -> MinPair x5 x7
        MinPair x14 x15 -> MinPair x14
                             (balance x5 x15 x7)

(Goals: 6)
(Measures: 5)
(Spec size: 18)
(Solution size: 106)
(EC: 336)
(SC: 22)
M/AVL-Delete
delete :: y:a -> t:AVL a -> {AVL a|eqOrOneLess (realHeight _v) (realHeight t) && elems t - [y] == elems _v}
delete = \y . \t . 
    match t with
      Leaf -> t
      Node x5 x6 x7 x8 -> 
        if x5 < y
          then balance x5 x6 (delete y x7)
          else 
            if y < x5
              then balance x5 (delete y x6) x7
              else merge x5 x6 x7

(Goals: 6)
(Measures: 5)
(Spec size: 21)
(Solution size: 128)
(EC: 528)
(SC: 35)
N/RBT-BalanceL
balanceL :: y:a -> c:Color -> l:{WeakRBT {a|_v < y}|c == 0 ==> isOk _v} -> r:{RBT {a|_v > y}|(c == 0 ==> color _v == 1) && blackHeight _v == wheight l} -> {WeakRBT a|((welems _v == ([y] + welems l) + elems r && wheight _v == blackHeight r + c) && wsize _v == (1 + wsize l) + size r) && (isOk _v || c == 0)}
balanceL = \y . \c . \l . \r . 
        match l with
          Ok x5 x6 x7 x8 -> 
            if (c == 0) && (x6 == 0)
              then Bad x5 black x7 (Node y c
                                      x8 r)
              else Ok y c (Node x5 x6 x7 x8) r
          Bad x29 x30 x31 x32 -> rotateL y
                                   x29 x30 x31 x32 r

(Goals: 10)
(Measures: 9)
(Spec size: 89)
(Solution size: 204)
(EC: 500)
(SC: 202)
N/RBT-BalanceR
balanceR :: x:a -> c:Color -> l:{RBT {a|_v < x}|c == 0 ==> color _v == 1} -> r:{WeakRBT {a|_v > x}|(c == 0 ==> isOk _v) && wheight _v == blackHeight l} -> {WeakRBT a|((welems _v == ([x] + elems l) + welems r && wheight _v == blackHeight l + c) && wsize _v == (1 + size l) + wsize r) && (isOk _v || c == 0)}
balanceR = \x . \c . \l . \r . 
        match r with
          Ok x5 x6 x7 x8 -> 
            if (c == 0) && (x6 == 0)
              then Bad x black l (Node x5 c x7
                                    x8)
              else Ok x c l (Node x5 x6 x7 x8)
          Bad x29 x30 x31 x32 -> rotateR x
                                   l x29 x30 x31 x32

(Goals: 10)
(Measures: 9)
(Spec size: 89)
(Solution size: 204)
(EC: 462)
(SC: 221)
M/RBT-Insert
insert :: x:a -> t:RBT a -> {RBT a|elems _v == elems t + [x]}
insert = \x . \t . mkBlack (ins
                              x t)

(Goals: 10)
(Measures: 9)
(Spec size: 34)
(Solution size: 146)
(EC: 98)
(SC: 19)
C1/AddressBook-Make
mkAddressBook :: adds:List Address -> {AddressBook|size _v == len adds}
mkAddressBook = \adds . 
  match adds with
    Nil -> AddressBook Nil Nil
    Cons x5 x6 -> 
      match mkAddressBook x6 with
        AddressBook x10 x11 -> 
          if getPriv x5
            then AddressBook x10 (Cons x5
                                    x11)
            else AddressBook (Cons x5 x10)
                   x11

(Goals: 4)
(Measures: 3)
(Spec size: 11)
(Solution size: 61)
(EC: 372)
(SC: 15)
N/AddressBook-Merge
mergeAddressBooks :: a:AddressBook -> b:AddressBook -> {AddressBook|size _v == size a + size b}
mergeAddressBooks = \a . \b . 
    match a with
      AddressBook x2 x3 -> 
        match b with
          AddressBook x6 x7 -> AddressBook
                                 (append x2 x6) (append x3 x7)

(Goals: 4)
(Measures: 3)
(Spec size: 14)
(Solution size: 46)
(EC: 334)
(SC: 0)
Resyn/List-Triple1
triple :: xs:List a -> {List a|len _v == (len xs + len xs) + len xs}
triple = \xs . append xs (append
                            xs xs)

(Goals: 3)
(Measures: 2)
(Spec size: 14)
(Solution size: 34)
(EC: 162)
(SC: 49)
Resyn/List-Triple2
triple :: xs:List a -> {List a|len _v == (len xs + len xs) + len xs}
triple = \xs . append (Pair xs
                         (append (Pair xs xs)))

(Goals: 7)
(Measures: 6)
(Spec size: 17)
(Solution size: 64)
(EC: 379)
(SC: 276)
Resyn/List-Concat
concat :: xss:ListOfLists a -> acc:List a -> {List a|len1 _v == sumLen xss + len1 acc}
concat = \xss . \acc . 
    match xss with
      Nil2 -> acc
      Cons2 x3 x4 -> append acc
                       (concat x4 x3)

(Goals: 4)
(Measures: 3)
(Spec size: 17)
(Solution size: 49)
(EC: 391)
(SC: 0)
Resyn/List-Intersect
intersect :: l1:IList a -> l2:IList a -> {List a|elems _v == ielems l1 * ielems l2}
intersect = \l1 . \l2 . 
    match l1 with
      INil -> Nil
      ICons x4 x5 -> 
        match l2 with
          INil -> Nil
          ICons x8 x9 -> 
            if x8 < x4
              then intersect l1 x9
              else 
                if x4 < x8
                  then intersect x5 l2
                  else Cons x4 (intersect l1 x9)

(Goals: 5)
(Measures: 4)
(Spec size: 14)
(Solution size: 87)
(EC: 74)
(SC: 0)
Resyn/List-Diff
diff :: l1:IList a -> l2:IList a -> {List a|elems _v == ielems l1 - ielems l2}
diff = \l1 . \l2 . 
    match l1 with
      INil -> Nil
      ICons x4 x5 -> 
        match l2 with
          INil -> Cons x4 (diff x5 l2)
          ICons x12 x13 -> 
            if x12 < x4
              then diff l1 x13
              else 
                if x4 < x12
                  then Cons x4 (diff x5 l2)
                  else diff x5 l2

(Goals: 5)
(Measures: 4)
(Spec size: 14)
(Solution size: 95)
(EC: 225)
(SC: 65)
Resyn/List-Insert-Fine
insert :: x:a -> xs:IList a -> {IList a|ielems _v == ielems xs + [x]}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x5 < x
          then ICons x5 (insert x x6)
          else ICons x (ICons x5 x6)

(Goals: 4)
(Measures: 3)
(Spec size: 14)
(Solution size: 82)
(EC: 104)
(SC: 0)
Resyn/List-Range
range :: p:Pair -> {IList {Int|fst p <= _v && _v <= snd p}|ilen _v == snd p - fst p}
range = \p . 
  match p with
    Pair x3 x4 -> 
      if x3 >= x4
        then INil
        else ICons x3 (range (Pair (inc
                                      x3) x4))

(Goals: 6)
(Measures: 5)
(Spec size: 23)
(Solution size: 63)
(EC: 1100)
(SC: 611)
Resyn/List-LenCompare
compare :: xs:List a -> ys:List a -> {Bool|_v == (len xs == len ys)}
compare = \xs . \ys . 
    match xs with
      Nil -> 
        match ys with
          Nil -> true
          Cons x3 x4 -> false
      Cons x7 x8 -> 
        match ys with
          Nil -> false
          Cons x11 x12 -> compare x8 x12

(Goals: 2)
(Measures: 1)
(Spec size: 10)
(Solution size: 27)
(EC: 4108)
(SC: 183)
Synplexity/BinarySearch
binarySearch :: <p :: Int -> a -> Bool> . x:a -> xs:IList a <p> -> {Bool|_v == (x in ielems xs)}
binarySearch = \x . \xs . 
    match xs with
      INil -> false
      ICons x3 x4 -> leq (split x4)
                       (split INil)

(Goals: 6)
(Measures: 5)
(Spec size: 12)
(Solution size: 50)
(EC: 312)
(SC: 18)
Synplexity/nTimesM_log
nTimesM :: n:{Int|_v >= 0} -> m:{Int|_v > 0} -> {Int|_v == m * n}
nTimesM = \n . \m . 
    if (n % 2) == 0
      then nTimesM (div2 n) (double m)
      else plus m (nTimesM (div2 n)
                     (double m))

(Goals: 1)
(Measures: 0)
(Spec size: 11)
(Solution size: 34)
(EC: 4522)
(SC: 80)
Synplexity/List-MergeSort2
mergeSort :: xs:List a -> {IList a|ilen _v == len xs && ielems _v == elems xs}
mergeSort = \xs . 
  match split xs with
    Pair x8 x9 -> merge (mergeSort
                           x8) (mergeSort x9)

(Goals: 7)
(Measures: 6)
(Spec size: 17)
(Solution size: 70)
(EC: 20254)
(SC: 1256)
Synplexity/BinarySearch2
binarySearch :: <p :: Int -> a -> Bool> . x:a -> xs:IList a <p> -> {Bool|_v == (x in ielems xs)}
binarySearch = \x . \xs . 
    match xs with
      INil -> false
      ICons x3 x4 -> 
        if (x <= x3) && (x3 <= x)
          then true
          else binarySearch x x4

(Goals: 6)
(Measures: 5)
(Spec size: 12)
(Solution size: 61)
(EC: 57)
(SC: 0)
Synplexity/nTimesM_log2
nTimesM :: n:{Int|_v >= 0} -> m:{Int|_v > 0} -> {Int|_v == m * n}
nTimesM = \n . \m . 
    if n == 0
      then n
      else plus m (nTimesM (dec n) m)

(Goals: 1)
(Measures: 0)
(Spec size: 11)
(Solution size: 20)
(EC: 966)
(SC: 44)
