N/List-Null
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("null",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (IntLit 0))))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("null",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]) (IntLit 0))))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (IntLit 0)))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
null :: xs:List a -> {Bool|_v == (len xs == 0)}
null = \xs . 
  match xs with
    Nil -> true
    Cons x3 x4 -> false

(Goals: 2)
(Measures: 1)
(Spec size: 9)
(Solution size: 16)
C1/List-Elem
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elem",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "x0"])))))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
elem :: x:a -> xs:List a -> {Bool|_v == (x in elems xs)}
elem = \x . \xs . 
    match xs with
      Nil -> false
      Cons x3 x4 -> 
        if x3 == x
          then true
          else elem x x4

(Goals: 3)
(Measures: 2)
(Spec size: 9)
(Solution size: 41)
C1/List-Duplicate
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("stutter",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Times (IntLit 2) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"])))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Times (IntLit 2) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
stutter :: xs:List a -> {List a|len _v == 2 * len xs}
stutter = \xs . 
  match xs with
    Nil -> xs
    Cons x3 x4 -> Cons x3 (Cons x3
                             (stutter x4))

(Goals: 2)
(Measures: 1)
(Spec size: 10)
(Solution size: 26)
C1/List-Replicate
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var IntS "x") (Var IntS "y"))))))),("neq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var IntS "x") (Var IntS "y"))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("leq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var IntS "x") (Var IntS "y"))))))),("neq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var IntS "x") (Var IntS "y"))))))),("replicate",ForallT "a" (Monotype (FunctionT "x0" (ScalarT IntT (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary Lt (Var IntS "_v") (Var IntS "n"))))) (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Var IntS "x0"))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",FunctionT "n" (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))) (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Var IntS "n")))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
replicate :: n:Nat -> x:a -> {List a|len _v == n}
replicate = \n . \x . 
    if n <= 0
      then Nil
      else Cons x (replicate (dec n)
                     x)

(Goals: 2)
(Measures: 1)
(Spec size: 7)
(Solution size: 31)
C1/List-Append
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"]))))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
append :: xs:List a -> ys:List a -> {List a|len _v == len xs + len ys}
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons x3 x4 -> Cons x3 (append x4
                               ys)

(Goals: 2)
(Measures: 1)
(Spec size: 11)
(Solution size: 25)
C1/List-Concat
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Cons2",ForallT "a" (Monotype (FunctionT "x" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Cons2" [Var (DataS "List" [VarS "a"]) "x",Var (DataS "ListOfLists" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Nil2",ForallT "a" (Monotype (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Nil2" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Cons2",ForallT "a" (Monotype (FunctionT "x" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Cons2" [Var (DataS "List" [VarS "a"]) "x",Var (DataS "ListOfLists" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Nil2",ForallT "a" (Monotype (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Nil2" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("len2",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Cons2",ForallT "a" (Monotype (FunctionT "x" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Cons2" [Var (DataS "List" [VarS "a"]) "x",Var (DataS "ListOfLists" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Nil2",ForallT "a" (Monotype (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Nil2" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("len2",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("sumLen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Cons2",ForallT "a" (Monotype (FunctionT "x" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Cons2" [Var (DataS "List" [VarS "a"]) "x",Var (DataS "ListOfLists" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Nil2",ForallT "a" (Monotype (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Nil2" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("concat",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len2" [Var (DataS "ListOfLists" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len2" [Var (DataS "ListOfLists" [VarS "a"]) "_v"]) (Pred IntS "len2" [Var (DataS "ListOfLists" [VarS "a"]) "xss"])))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "sumLen" [Var (DataS "ListOfLists" [VarS "a"]) "x0"]))))))])
("env",FunctionT "xss" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "sumLen" [Var (DataS "ListOfLists" [VarS "a"]) "xss"]))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil2", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons2", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len2", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil2", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons2", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "sumLen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
concat :: xss:ListOfLists a -> {List a|len _v == sumLen xss}
concat = \xss . 
  match xss with
    Nil2 -> Nil
    Cons2 x3 x4 -> append x3 (concat
                                x4)

(Goals: 4)
(Measures: 3)
(Spec size: 14)
(Solution size: 46)
C1/List-Take
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var IntS "x") (Var IntS "y"))))))),("neq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var IntS "x") (Var IntS "y"))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("leq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var IntS "x") (Var IntS "y"))))))),("neq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var IntS "x") (Var IntS "y"))))))),("take",ForallT "a" (Monotype (FunctionT "x0" (ScalarT IntT (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary Lt (Var IntS "_v") (Var IntS "n"))))) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Var IntS "x0"))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Var IntS "x0"))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",FunctionT "n" (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Var IntS "n"))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Var IntS "n")))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
take :: n:Nat -> xs:{List a|len _v >= n} -> {List a|len _v == n}
take = \n . \xs . 
    if 0 != n
      then 
        match xs with
          Nil -> error
          Cons x3 x4 -> Cons x3 (take (dec
                                         n) x4)
      else Nil

(Goals: 2)
(Measures: 1)
(Spec size: 11)
(Solution size: 34)
C1/List-Drop
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var IntS "x") (Var IntS "y"))))))),("neq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var IntS "x") (Var IntS "y"))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("drop",ForallT "a" (Monotype (FunctionT "x0" (ScalarT IntT (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary Lt (Var IntS "_v") (Var IntS "n"))))) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Var IntS "x0"))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Var IntS "x0")))))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("leq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var IntS "x") (Var IntS "y"))))))),("neq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var IntS "x") (Var IntS "y"))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",FunctionT "n" (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Var IntS "n"))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Var IntS "n"))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
drop :: n:Nat -> xs:{List a|len _v >= n} -> {List a|len _v == len xs - n}
drop = \n . \xs . 
    if 0 != n
      then 
        match xs with
          Nil -> error
          Cons x3 x4 -> drop (dec n) x4
      else xs

(Goals: 2)
(Measures: 1)
(Spec size: 14)
(Solution size: 30)
C1/List-Delete
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("delete",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Diff (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "x0"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Diff (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
delete :: x:a -> xs:List a -> {List a|elems _v == elems xs - [x]}
delete = \x . \xs . 
    match xs with
      Nil -> xs
      Cons x3 x4 -> 
        if x3 == x
          then delete x x4
          else Cons x3 (delete x x4)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 49)
C1/List-Zip
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("zip",ForallT "a" (ForallT "b" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "b"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]))) (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [DataS "Pair" [VarS "a",VarS "b"]]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]))))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "b"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]))) (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [DataS "Pair" [VarS "a",VarS "b"]]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
zip :: xs:List a -> ys:{List b|len _v == len xs} -> {List Pair a b|len _v == len xs}
zip = \xs . \ys . 
    match xs with
      Nil -> Nil
      Cons x3 x4 -> 
        match ys with
          Nil -> error
          Cons x7 x8 -> Cons (Pair x3 x7)
                          (zip x4 x8)

(Goals: 2)
(Measures: 1)
(Spec size: 13)
(Solution size: 32)
C1/List-Ith
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [IntLit 0,Var (VarS "a") "_v"])) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Binary Plus (Var IntS "_0") (IntLit 1),Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("leq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var IntS "x") (Var IntS "y"))))))),("neq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var IntS "x") (Var IntS "y"))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [IntLit 0,Var (VarS "a") "_v"])) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Binary Plus (Var IntS "_0") (IntLit 1),Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("ith",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (FunctionT "i" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Lt (Var IntS "_v") (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"])))) (ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var IntS "i",Var (VarS "a") "_v"]))))))),("leq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var IntS "x") (Var IntS "y"))))))),("neq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var IntS "x") (Var IntS "y"))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (FunctionT "i" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Lt (Var IntS "_v") (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var IntS "i",Var (VarS "a") "_v"]))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
ith :: <p :: Int -> a -> Bool> . xs:List a <p> -> i:{Int|0 <= _v && _v < len xs} -> {a|p i _v}
ith = \xs . \i . 
    match xs with
      Nil -> error
      Cons x3 x4 -> 
        if i <= 0
          then x3
          else ith x4 (dec i)

(Goals: 2)
(Measures: 1)
(Spec size: 16)
(Solution size: 30)
C1/List-ElemIndex
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [IntLit 0,Var (VarS "a") "_v"])) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Binary Plus (Var IntS "_0") (IntLit 1),Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [IntLit 0,Var (VarS "a") "_v"])) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Binary Plus (Var IntS "_0") (IntLit 1),Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("elems",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [IntLit 0,Var (VarS "a") "_v"])) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Binary Plus (Var IntS "_0") (IntLit 1),Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("elemIndex",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary And (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"])) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]))))) (ScalarT IntT (Pred BoolS "p" [Var IntS "_v",Var (VarS "a") "x"]))))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]))) (ScalarT IntT (Pred BoolS "p" [Var IntS "_v",Var (VarS "a") "x"]))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
elemIndex :: <p :: Int -> a -> Bool> . x:a -> xs:{List a <p>|x in elems _v} -> {Int|p _v x}
elemIndex = \x . \xs . 
    match xs with
      Nil -> error
      Cons x3 x4 -> 
        if x3 == x
          then zero
          else inc (elemIndex x x4)

(Goals: 3)
(Measures: 2)
(Spec size: 13)
(Solution size: 43)
C1/List-Snoc
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "x",Var (VarS "a") "_v"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "x",Var (VarS "a") "_v"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "x",Var (VarS "a") "_v"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("snoc",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "_v",Var (VarS "a") "x"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "x0"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "_v",Var (VarS "a") "x"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
snoc :: <p :: a -> a -> Bool> . x:a -> xs:List {a|p _v x} <p> -> {List a <p>|len _v == len xs + 1 && elems _v == elems xs + [x]}
snoc = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons x5 x6 -> Cons x5 (snoc x
                               x6)

(Goals: 3)
(Measures: 2)
(Spec size: 26)
(Solution size: 42)
C1/List-Reverse
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "x",Var (VarS "a") "_v"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("snoc",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "_v",Var (VarS "a") "x"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))))))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "x",Var (VarS "a") "_v"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("snoc",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "_v",Var (VarS "a") "x"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))))))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "x",Var (VarS "a") "_v"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("reverse",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_1",Var (VarS "a") "_0"]]) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "x0"])))))))),("snoc",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "_v",Var (VarS "a") "x"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_1",Var (VarS "a") "_0"]]) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
reverse :: <p :: a -> a -> Bool> . xs:List a <p> -> {List a <p _1 _0>|len _v == len xs && elems _v == elems xs}
reverse = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> snoc x3 (reverse
                             x4)

(Goals: 3)
(Measures: 2)
(Spec size: 20)
(Solution size: 35)
C1/UniqueList-Insert
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Pred BoolS "p" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "_v"])) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Pred BoolS "p" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "_v"])) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Pred BoolS "p" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "_v"])) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Unary Not (Binary Member (Var (VarS "a") "_0") (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_1"]))]) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Unary Not (Binary Member (Var (VarS "a") "_0") (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_1"]))]) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "x0"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Unary Not (Binary Member (Var (VarS "a") "_0") (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_1"]))]) (BoolLit True)) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Unary Not (Binary Member (Var (VarS "a") "_0") (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_1"]))]) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
insert :: x:a -> xs:UList a -> {UList a|elems _v == elems xs + [x]}
insert = \x . \xs . 
    match xs with
      Nil -> Cons x xs
      Cons x5 x6 -> 
        if x5 == x
          then xs
          else Cons x5 (insert x x6)

(Goals: 3)
(Measures: 2)
(Spec size: 13)
(Solution size: 49)
C1/UniqueList-Delete
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Pred BoolS "p" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "_v"])) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Pred BoolS "p" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "_v"])) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Pred BoolS "p" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "_v"])) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("delete",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Unary Not (Binary Member (Var (VarS "a") "_0") (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_1"]))]) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Unary Not (Binary Member (Var (VarS "a") "_0") (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_1"]))]) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_v"]) (Binary Diff (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "x0"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Unary Not (Binary Member (Var (VarS "a") "_0") (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_1"]))]) (BoolLit True)) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Unary Not (Binary Member (Var (VarS "a") "_0") (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_1"]))]) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_v"]) (Binary Diff (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
delete :: x:a -> xs:UList a -> {UList a|elems _v == elems xs - [x]}
delete = \x . \xs . 
    match xs with
      Nil -> xs
      Cons x3 x4 -> 
        if x3 == x
          then x4
          else Cons x3 (delete x x4)

(Goals: 3)
(Measures: 2)
(Spec size: 13)
(Solution size: 45)
C2/List-RemoveDub
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Pred BoolS "p" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "_v"])) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elem",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [BoolLit True]) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "arg0"])))) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "xs"])))))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Pred BoolS "p" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "_v"])) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elem",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [BoolLit True]) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "arg0"])))) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "xs"])))))))),("elems",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Pred BoolS "p" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "_v"])) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elem",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [BoolLit True]) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "xs"])))) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "xs"])))))))),("nub",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [BoolLit True]) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Unary Not (Binary Member (Var (VarS "a") "_0") (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_1"]))]) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "x0"]))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [BoolLit True]) (BoolLit True)) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Unary Not (Binary Member (Var (VarS "a") "_0") (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_1"]))]) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "xs"]))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
nub :: xs:List a -> {UList a|elems _v == elems xs}
nub = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> 
      if elem x3 x4
        then nub x4
        else Cons x3 (nub x4)

(Goals: 3)
(Measures: 2)
(Spec size: 10)
(Solution size: 44)
C1/List-Compress
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Pred BoolS "p" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "_v"])) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Pred BoolS "p" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "_v"])) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Pred BoolS "p" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "_v"])) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("heads",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Pred BoolS "p" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "_v"])) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",DataS "PList" [VarS "a"]], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("compress",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [BoolLit True]) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "PList" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Unary Not (Binary Member (Var (VarS "a") "_0") (Pred (SetS (VarS "a")) "heads" [Var (DataS "PList" [VarS "a"]) "_1"]))]) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "x0"])))))),("eq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [BoolLit True]) (BoolLit True)) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Unary Not (Binary Member (Var (VarS "a") "_0") (Pred (SetS (VarS "a")) "heads" [Var (DataS "PList" [VarS "a"]) "_1"]))]) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "PList" [VarS "a"]) "xs"]))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (DataS "PList" [VarS "a"]) "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
compress :: xs:List a -> {CList a|elems _v == elems xs}
compress = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> 
      match compress x4 with
        Nil -> Cons x3 Nil
        Cons x10 x11 -> 
          if x3 == x10
            then compress x4
            else Cons x3 (Cons x10 x11)

(Goals: 4)
(Measures: 3)
(Spec size: 11)
(Solution size: 62)
C1/UniqueList-Range
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "x",Var (VarS "a") "_v"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("leq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var IntS "x") (Var IntS "y"))))))),("neq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var IntS "x") (Var IntS "y"))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "x",Var (VarS "a") "_v"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("elems",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("len",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("leq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var IntS "x") (Var IntS "y"))))))),("neq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var IntS "x") (Var IntS "y"))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",fromList [("Cons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [Var (VarS "a") "x",Var (VarS "a") "_v"])] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "PList" [VarS "a"]) "xs"])))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [VarS "a",VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "PList" [VarS "a"]) "_v") (Cons (DataS "PList" [VarS "a"]) "Nil" [])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("leq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var IntS "x") (Var IntS "y"))))))),("neq",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var IntS "x") (Var IntS "y"))))))),("range",Monotype (FunctionT "x0" (ScalarT IntT (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary Lt (Var IntS "_v") (Var IntS "size"))))) (FunctionT "lo" (ScalarT IntT (BoolLit True)) (ScalarT (DatatypeT "PList" [ScalarT IntT (Binary And (Binary Le (Var IntS "lo") (Var IntS "_v")) (Binary Le (Var IntS "_v") (Binary Plus (Var IntS "lo") (Var IntS "x0"))))] [Binary Neq (Var IntS "_0") (Var IntS "_1")]) (Binary Eq (Pred IntS "len" [Var (DataS "PList" [IntS]) "_v"]) (Var IntS "x0")))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",FunctionT "size" (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))) (FunctionT "lo" (ScalarT IntT (BoolLit True)) (ScalarT (DatatypeT "PList" [ScalarT IntT (Binary And (Binary Le (Var IntS "lo") (Var IntS "_v")) (Binary Le (Var IntS "_v") (Binary Plus (Var IntS "lo") (Var IntS "size"))))] [Binary Neq (Var IntS "_0") (Var IntS "_1")]) (Binary Eq (Pred IntS "len" [Var (DataS "PList" [IntS]) "_v"]) (Var IntS "size")))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "PList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var (VarS "a") "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
range :: size:Nat -> lo:Int -> {UList {Int|lo <= _v && _v <= lo + size}|len _v == size}
range = \size . \lo . 
    if size <= 0
      then Nil
      else Cons lo (range (dec size)
                      (inc lo))

(Goals: 3)
(Measures: 2)
(Spec size: 18)
(Solution size: 46)
C1/StrictIncList-Insert
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "x0"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
insert :: x:a -> xs:IList a -> {IList a|ielems _v == ielems xs + [x]}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x5 < x
          then ICons x5 (insert x x6)
          else 
            if x < x5
              then ICons x (ICons x5 x6)
              else xs

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 64)
C1/StrictIncList-Delete
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("delete",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Diff (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "x0"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Diff (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
delete :: x:a -> xs:IList a -> {IList a|ielems _v == ielems xs - [x]}
delete = \x . \xs . 
    match xs with
      INil -> xs
      ICons x3 x4 -> 
        if x < x3
          then xs
          else 
            if x3 < x
              then ICons x3 (delete x x4)
              else x4

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 52)
C1/StrictIncList-Intersect
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "SList" [VarS "a"]) "_v") (Cons (DataS "SList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "SList" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "SList" [VarS "a"]) "_v") (Cons (DataS "SList" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "SList" [VarS "a"]) "_v") (Cons (DataS "SList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "SList" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "SList" [VarS "a"]) "_v") (Cons (DataS "SList" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "SList" [VarS "a"]) "_v") (Cons (DataS "SList" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "SList" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "SList" [VarS "a"]) "_v") (Cons (DataS "SList" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("intersect",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "SList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "SList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "SList" [VarS "a"]) "xs"])))) (FunctionT "x1" (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "SList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "SList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "SList" [VarS "a"]) "ys"]))) (Binary Or (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "SList" [VarS "a"]) "x0"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "SList" [VarS "a"]) "x0"]) (Pred IntS "len" [Var (DataS "SList" [VarS "a"]) "xs"]))) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "SList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "SList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "SList" [VarS "a"]) "ys"])))))) (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "SList" [VarS "a"]) "_v"]) (Binary Intersect (Pred (SetS (VarS "a")) "elems" [Var (DataS "SList" [VarS "a"]) "x0"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "SList" [VarS "a"]) "x1"])))))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "SList" [VarS "a"]) "_v"]) (Binary Intersect (Pred (SetS (VarS "a")) "elems" [Var (DataS "SList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "SList" [VarS "a"]) "ys"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "SList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
intersect :: xs:SList a -> ys:SList a -> {SList a|elems _v == elems xs * elems ys}
intersect = \xs . \ys . 
    match xs with
      Nil -> xs
      Cons x4 x5 -> 
        match ys with
          Nil -> ys
          Cons x8 x9 -> 
            if x4 < x8
              then intersect x5 ys
              else 
                if x8 < x4
                  then intersect xs x9
                  else Cons x4 (intersect x5 x9)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 63)
C1/insert(sorted)
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "x0"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
insert :: x:a -> xs:IList a -> {IList a|ielems _v == ielems xs + [x]}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x5 <= x
          then ICons x5 (insert x x6)
          else ICons x (ICons x5 x6)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 57)
C2/List-InsertSort
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))) (Binary Eq (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))) (Binary Eq (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))) (Binary Eq (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))) (Binary Eq (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))) (Binary Eq (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"])))))))),("insertSort",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "x0"])) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"])))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"])))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
insertSort :: xs:List a -> {IList a|ielems _v == elems xs && len xs == ilen _v}
insertSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> insert x3
                    (insertSort x4)

(Goals: 5)
(Measures: 4)
(Spec size: 17)
(Solution size: 59)
C1/List-ExtractMin
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "l"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "l"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "l"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("min",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "l"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("min",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("rest",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "l"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("extractMin",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Gt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]))))) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "x0"]) (Binary Union (SetLit (VarS "a") [Pred (VarS "a") "min" [Var (DataS "MinPair" [VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]]))) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]) (Binary Plus (IntLit 1) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Gt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0))) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Union (SetLit (VarS "a") [Pred (VarS "a") "min" [Var (DataS "MinPair" [VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]]))) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Plus (IntLit 1) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "MinPair", argNames = ["x","l"], expr = Program {content = PSymbol "x", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "MinPair", argNames = ["x","l"], expr = Program {content = PSymbol "l", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
extractMin :: xs:{List a|len _v > 0} -> {MinPair a|elems xs == [min _v] + elems (rest _v) && len xs == 1 + len (rest _v)}
extractMin = \xs . 
  match xs with
    Nil -> error
    Cons x3 x4 -> 
      match x4 with
        Nil -> MinPair x3 Nil
        Cons x9 x10 -> 
          match extractMin x4 with
            MinPair x14 x15 -> 
              if x14 <= x3
                then MinPair x14 (Cons x3 x15)
                else MinPair x3 (Cons x14 x15)

(Goals: 5)
(Measures: 4)
(Spec size: 26)
(Solution size: 71)
C2/List-SelectSort
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "l"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("extractMin",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Gt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"]))))) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Union (SetLit (VarS "a") [Pred (VarS "a") "min" [Var (DataS "MinPair" [VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]]))) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Plus (IntLit 1) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "l"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("extractMin",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Gt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"]))))) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Union (SetLit (VarS "a") [Pred (VarS "a") "min" [Var (DataS "MinPair" [VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]]))) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Plus (IntLit 1) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "l"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("extractMin",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Gt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"]))))) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Union (SetLit (VarS "a") [Pred (VarS "a") "min" [Var (DataS "MinPair" [VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]]))) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Plus (IntLit 1) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]])))))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "l"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("extractMin",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Gt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"]))))) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Union (SetLit (VarS "a") [Pred (VarS "a") "min" [Var (DataS "MinPair" [VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]]))) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Plus (IntLit 1) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]])))))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "l"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("extractMin",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Gt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"]))))) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Union (SetLit (VarS "a") [Pred (VarS "a") "min" [Var (DataS "MinPair" [VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]]))) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Plus (IntLit 1) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]])))))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("min",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "l"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("extractMin",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Gt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"]))))) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Union (SetLit (VarS "a") [Pred (VarS "a") "min" [Var (DataS "MinPair" [VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]]))) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Plus (IntLit 1) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]])))))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("min",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True))))),("rest",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "l"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("extractMin",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Gt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]))))) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Union (SetLit (VarS "a") [Pred (VarS "a") "min" [Var (DataS "MinPair" [VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]]))) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Plus (IntLit 1) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "rest" [Var (DataS "MinPair" [VarS "a"]) "_v"]])))))))),("selectSort",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "x0"])) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"])))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"])))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "MinPair", argNames = ["x","l"], expr = Program {content = PSymbol "x", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "MinPair", argNames = ["x","l"], expr = Program {content = PSymbol "l", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
selectSort :: xs:List a -> {IList a|ielems _v == elems xs && len xs == ilen _v}
selectSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> 
      match extractMin xs with
        MinPair x8 x9 -> ICons x8
                           (selectSort x9)

(Goals: 7)
(Measures: 6)
(Spec size: 17)
(Solution size: 71)
C1/List-Split
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("fst",ForallT "a" (ForallT "b" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("snd",ForallT "a" (ForallT "b" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("snd",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("split",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["x","y"], expr = Program {content = PSymbol "x", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["x","y"], expr = Program {content = PSymbol "y", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
split :: xs:List a -> {List a|abs (len xs - len _v * 2) <= 1}
split = \xs . 
  match xs with
    Nil -> xs
    Cons x3 x4 -> 
      match x4 with
        Nil -> x4
        Cons x7 x8 -> Cons x3 (split x8)

(Goals: 4)
(Measures: 3)
(Spec size: 13)
(Solution size: 33)
C1/IncList-Merge
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("merge",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])))) (FunctionT "x1" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"]))) (Binary Or (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "x0"]) (IntLit 0)) (Binary Lt (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "x0"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]))) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])))))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "x0"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "x1"]))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "x0"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "x1"]))))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"]))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
merge :: xs:IList a -> ys:IList a -> {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
merge = \xs . \ys . 
    match ys with
      INil -> xs
      ICons x4 x5 -> 
        match xs with
          INil -> ys
          ICons x8 x9 -> 
            if x4 <= x8
              then ICons x4 (merge (ICons x8
                                      x9) x5)
              else ICons x8 (merge x9 (ICons
                                         x4 x5))

(Goals: 3)
(Measures: 2)
(Spec size: 20)
(Solution size: 64)
M/List-MergeSort
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("fst",ForallT "a" (ForallT "b" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("merge",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (IntLit 0)) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (Unary Neg (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])))) (IntLit 1))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"]))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"]))))))))),("mergeSort",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]))))))),("split",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1)),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("merge",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (IntLit 0)) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (Unary Neg (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])))) (IntLit 1))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"]))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"]))))))))),("mergeSort",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]))))))),("snd",ForallT "a" (ForallT "b" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)))))),("split",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1)),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("merge",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (IntLit 0)) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (Unary Neg (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])))) (IntLit 1))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"]))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"]))))))))),("mergeSort",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]))))))),("snd",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)))))),("split",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1)),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("merge",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (IntLit 0)) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (Unary Neg (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])))) (IntLit 1))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"]))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"]))))))))),("mergeSort",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]))))))),("snd",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)))))),("split",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1)),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("merge",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (IntLit 0)) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (Unary Neg (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])))) (IntLit 1))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"]))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"]))))))))),("mergeSort",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]))))))),("snd",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)))))),("split",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1)),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("merge",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (IntLit 0)) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (Unary Neg (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])))) (IntLit 1))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"]))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"]))))))))),("mergeSort",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]))))))),("snd",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)))))),("split",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1)),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("merge",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (IntLit 0)) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (Unary Neg (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])))) (IntLit 1))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"]))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"]))))))))),("mergeSort",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Or (Binary Le (Binary Times (IntLit 2) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Le (Binary Times (IntLit 2) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"])) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (IntLit 4)))))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"])) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "x0"]))))))),("split",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Binary Times (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1)),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["x","y"], expr = Program {content = PSymbol "x", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["x","y"], expr = Program {content = PSymbol "y", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
mergeSort :: xs:List a -> {IList a|ilen _v == len xs && ielems _v == elems xs}
mergeSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> 
      match x4 with
        Nil -> mergeSort xs
        Cons x8 x9 -> 
          match split x9 with
            Pair x13 x14 -> merge (mergeSort
                                     (Cons x3 x13)) (mergeSort (Cons
                                                                  x8 x14))

(Goals: 7)
(Measures: 6)
(Spec size: 17)
(Solution size: 86)
C1/List-Partition
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("fst",ForallT "a" (ForallT "b" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("snd",ForallT "a" (ForallT "b" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("snd",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("snd",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("partition",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "x0"]))))))))])
("env",FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["x","y"], expr = Program {content = PSymbol "x", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["x","y"], expr = Program {content = PSymbol "y", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
partition :: p:a -> xs:List a -> {Pair List {a|_v <= p} List {a|_v > p}|len (fst _v) + len (snd _v) == len xs && elems (fst _v) + elems (snd _v) == elems xs}
partition = \p . \xs . 
    match xs with
      Nil -> Pair Nil Nil
      Cons x5 x6 -> 
        match partition p x6 with
          Pair x11 x12 -> 
            if x5 <= p
              then Pair (Cons x5 x11) x12
              else Pair x11 (Cons x5 x12)

(Goals: 5)
(Measures: 4)
(Spec size: 30)
(Solution size: 71)
C1/IncList-PivotAppend
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "x0"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "x0"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"]))))))))))])
("env",FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"]))))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
pivotAppend :: p:a -> xs:IList {a|_v <= p} -> ys:IList {a|_v > p} -> {IList a|ilen _v == (ilen xs + ilen ys) + 1 && ielems _v == (ielems xs + ielems ys) + [p]}
pivotAppend = \p . \xs . \ys . 
      match xs with
        INil -> ICons p ys
        ICons x5 x6 -> ICons x5
                         (pivotAppend p x6 ys)

(Goals: 3)
(Measures: 2)
(Spec size: 31)
(Solution size: 45)
C2/List-QuickSort
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("fst",ForallT "a" (ForallT "b" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("partition",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"])))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"]))))))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("partition",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"])))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"])))))))))),("snd",ForallT "a" (ForallT "b" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("partition",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"])))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"])))))))))),("snd",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("partition",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"])))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"])))))))))),("snd",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("partition",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"])))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"])))))))))),("snd",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("fst",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("partition",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"])))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"])))))))))),("snd",ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("partition",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True),ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Binary Union (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]]) (Pred (SetS (VarS "a")) "elems" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "List" [VarS "a"],DataS "List" [VarS "a"]]) "_v"]])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "xs"])))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"])))))))))),("quickSort",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"])) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "x0"])))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["x","y"], expr = Program {content = PSymbol "x", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["x","y"], expr = Program {content = PSymbol "y", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
quickSort :: xs:List a -> {IList a|ilen _v == len xs && ielems _v == elems xs}
quickSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> 
      match partition x3 x4 with
        Pair x9 x10 -> pivotAppend x3
                         (quickSort x9) (quickSort x10)

(Goals: 7)
(Measures: 6)
(Spec size: 17)
(Solution size: 77)
T/Tree-Elem
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Tree" [VarS "a"]) "l",Var (DataS "Tree" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elem",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "telems" [Var (DataS "Tree" [VarS "a"]) "t"])))))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("not",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Unary Not (Var BoolS "x")))))),("or",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (FunctionT "y" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Or (Var BoolS "x") (Var BoolS "y"))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Tree" [VarS "a"]) "l",Var (DataS "Tree" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elem",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "telems" [Var (DataS "Tree" [VarS "a"]) "t"])))))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("not",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Unary Not (Var BoolS "x")))))),("or",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (FunctionT "y" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Or (Var BoolS "x") (Var BoolS "y"))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("telems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Tree" [VarS "a"]) "l",Var (DataS "Tree" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elem",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "_v"]) (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "t"])))) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "telems" [Var (DataS "Tree" [VarS "a"]) "x0"])))))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("not",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Unary Not (Var BoolS "x")))))),("or",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (FunctionT "y" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Or (Var BoolS "x") (Var BoolS "y")))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "telems" [Var (DataS "Tree" [VarS "a"]) "t"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "telems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "telems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
elem :: x:a -> t:Tree a -> {Bool|_v == (x in telems t)}
elem = \x . \t . 
    match t with
      Empty -> false
      Node x4 x5 x6 -> 
        if x4 == x
          then not false
          else or (elem x x5) (elem x x6)

(Goals: 3)
(Measures: 2)
(Spec size: 9)
(Solution size: 63)
T/Tree-Count
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Tree" [VarS "a"]) "l",Var (DataS "Tree" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("countNodes",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "t"])))))),("one",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("plus",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (Var IntS "y"))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Tree" [VarS "a"]) "l",Var (DataS "Tree" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("countNodes",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "_v"]) (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "t"])))) (ScalarT IntT (Binary Eq (Var IntS "_v") (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "x0"])))))),("one",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("plus",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (Var IntS "y"))))))),("zero",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",FunctionT "t" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "t"]))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
countNodes :: t:Tree a -> {Int|_v == size t}
countNodes = \t . 
  match t with
    Empty -> zero
    Node x4 x5 x6 -> plus one (plus
                                 (countNodes x5) (countNodes x6))

(Goals: 2)
(Measures: 1)
(Spec size: 7)
(Solution size: 34)
T/Tree-ToList
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Tree" [VarS "a"]) "l",Var (DataS "Tree" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("toList",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "t"]))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Tree" [VarS "a"]) "l",Var (DataS "Tree" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("toList",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "t"]))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Tree" [VarS "a"]) "_v") (Cons (DataS "Tree" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Tree" [VarS "a"]) "l",Var (DataS "Tree" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("toList",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "_v"]) (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "t"])))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "x0"]))))))])
("env",FunctionT "t" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "size" [Var (DataS "Tree" [VarS "a"]) "t"]))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Tree" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
toList :: t:Tree a -> {List a|len _v == size t}
toList = \t . 
  match t with
    Empty -> Nil
    Node x4 x5 x6 -> Cons x4 (append
                                (toList x5) (toList x6))

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 45)
T/BST-Member
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("telems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("member",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "t"])))) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "x0"])))))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "telems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "telems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
member :: x:a -> t:BST a -> {Bool|_v == (x in telems t)}
member = \x . \t . 
    match t with
      Empty -> false
      Node x4 x5 x6 -> 
        if (x <= x4) && (x4 <= x)
          then true
          else 
            if x <= x4
              then member x x5
              else member x x6

(Goals: 3)
(Measures: 2)
(Spec size: 9)
(Solution size: 72)
T/BST-Insert
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("telems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "t"])))) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "x0"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "telems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "telems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
insert :: x:a -> t:BST a -> {BST a|telems _v == telems t + [x]}
insert = \x . \t . 
    match t with
      Empty -> Node x Empty Empty
      Node x7 x8 x9 -> 
        if (x <= x7) && (x7 <= x)
          then t
          else 
            if x7 <= x
              then Node x7 x8 (insert x x9)
              else Node x7 (insert x x8) x9

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 90)
T/BST-Delete
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("telems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("delete",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "t"])))) (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Diff (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "x0"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Diff (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "telems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "telems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
delete :: t:BST a -> x:a -> {BST a|telems _v == telems t - [x]}
delete = \t . \x . 
    match t with
      Empty -> t
      Node x4 x5 x6 -> 
        if (x4 != x) && (x4 <= x)
          then Node x4 x5 (delete x6 x)
          else 
            if x4 != x
              then Node x4 (delete x5 x) x6
              else 
                match x5 with
                  Empty -> x6
                  Node x20 x21 x22 -> Node x20 x21
                                        (delete (Node x x22 x6) x4)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 103)
C2/BST-Sort
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("flatten",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "arg0"]) (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "arg0"]))))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"])))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"]))))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"])))))))))),("sort",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))),("toBST",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("flatten",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "arg0"]) (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "arg0"]))))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"])))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"]))))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"])))))))))),("sort",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))),("toBST",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("flatten",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "arg0"]) (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "arg0"]))))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"])))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"]))))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"])))))))))),("sort",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))),("toBST",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("flatten",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "arg0"]) (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "arg0"]))))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"])))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"]))))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"])))))))))),("sort",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))),("toBST",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("flatten",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "arg0"]) (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "arg0"]))))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"])))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"]))))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"])))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("sort",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))),("toBST",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("flatten",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "arg0"]) (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "arg0"]))))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"])))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "arg0"]))))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"])))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("sort",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])))))),("telems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("toBST",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "BST" [VarS "a"]) "_v") (Cons (DataS "BST" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "BST" [VarS "a"]) "l",Var (DataS "BST" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("flatten",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "BST" [VarS "a"]) "xs"]))))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"])))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("pivotAppend",ForallT "a" (Monotype (FunctionT "p" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Times (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "IList" [VarS "a"]) "xs"]))))) (FunctionT "ys" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "p"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "ys"])) (IntLit 1))) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "ys"])) (SetLit (VarS "a") [Var (VarS "a") "p"])))))))))),("sort",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "x0"])))))),("toBST",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "telems" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"])) (Binary Eq (Pred IntS "size" [Var (DataS "BST" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "BST" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "telems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "telems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
sort :: xs:List a -> {IList a|ielems _v == elems xs}
sort = \xs . flatten (toBST xs)

(Goals: 7)
(Measures: 6)
(Spec size: 14)
(Solution size: 90)
C1/BinHeap-Member
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("member",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "t"])))))))),("not",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Unary Not (Var BoolS "x")))))),("or",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (FunctionT "y" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Or (Var BoolS "x") (Var BoolS "y"))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("member",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "t"])))))))),("not",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Unary Not (Var BoolS "x")))))),("or",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (FunctionT "y" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Or (Var BoolS "x") (Var BoolS "y"))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("member",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "Heap" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "size" [Var (DataS "Heap" [VarS "a"]) "_v"]) (Pred IntS "size" [Var (DataS "Heap" [VarS "a"]) "t"])))) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "x0"])))))))),("not",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Unary Not (Var BoolS "x")))))),("or",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (FunctionT "y" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Or (Var BoolS "x") (Var BoolS "y")))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "t"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
member :: x:a -> t:Heap a -> {Bool|_v == (x in elems t)}
member = \x . \t . 
    match t with
      Empty -> false
      Node x4 x5 x6 -> 
        if (x4 != x) && (x <= x4)
          then false
          else 
            if x <= x4
              then not false
              else or (member x x5) (member x
                                       x6)

(Goals: 3)
(Measures: 2)
(Spec size: 9)
(Solution size: 78)
C1/BinHeap-Insert
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("insert",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "Heap" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "size" [Var (DataS "Heap" [VarS "a"]) "_v"]) (Pred IntS "size" [Var (DataS "Heap" [VarS "a"]) "t"])))) (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "x0"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "t" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
insert :: t:Heap a -> x:a -> {Heap a|elems _v == elems t + [x]}
insert = \t . \x . 
    match t with
      Empty -> Node x Empty Empty
      Node x7 x8 x9 -> 
        if (x <= x7) && (x7 <= x)
          then t
          else 
            if x7 <= x
              then Node x7 x8 (insert x9 x)
              else Node x x8 (insert x9 x7)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 90)
N/BinHeap-Singleton
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "_v"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "_v"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "_v"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
singleton :: x:a -> {Heap a|elems _v == [x]}
singleton = \x . Node x Empty
                   Empty

(Goals: 3)
(Measures: 2)
(Spec size: 8)
(Solution size: 44)
N/BinHeap-Doubleton
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("doubleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "_v"]) (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "y"]))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("doubleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "_v"]) (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "y"]))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "_v"]) (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "y"])))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
doubleton :: x:a -> y:a -> {Heap a|elems _v == [x, y]}
doubleton = \x . \y . 
    if (x <= y) && (y <= x)
      then Node x Empty Empty
      else 
        if y <= x
          then Node y Empty (Node x Empty
                               Empty)
          else Node x Empty (Node y Empty
                               Empty)

(Goals: 3)
(Measures: 2)
(Spec size: 9)
(Solution size: 91)
N/BinHeap-Tripleton
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("tripleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "z" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "_v"]) (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "y",Var (VarS "a") "z"]))))))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("tripleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "z" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "_v"]) (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "y",Var (VarS "a") "z"]))))))))])
("env",fromList [("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Heap" [VarS "a"]) "_v") (Cons (DataS "Heap" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "Heap" [VarS "a"]) "l",Var (DataS "Heap" [VarS "a"]) "r"])))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "z" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "Heap" [VarS "a"]) "_v"]) (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "y",Var (VarS "a") "z"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Heap" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
tripleton :: x:a -> y:a -> z:a -> {Heap a|elems _v == [x, y, z]}
tripleton = \x . \y . \z . 
      if ((x <= y) && (y <= z)) && (z
                                      <= x)
        then Node x Empty Empty
        else 
          if (((z != y) && (x <= y)) && (y
                                           <= x)) && (y <= z)
            then Node y Empty (Node z Empty
                                 Empty)
            else 
              if (((y != x) && (x <= y)) && (x
                                               <= z)) && (z <= x)
                then Node x Empty (Node y Empty
                                     Empty)
                else 
                  if ((y <= z) && (z <= x)) && (z
                                                  <= y)
                    then Node z Empty (Node x Empty
                                         Empty)
                    else 
                      if (y <= x) && (y <= z)
                        then Node y (Node z Empty Empty)
                               (Node x Empty Empty)
                        else 
                          if (z <= x) && (z <= y)
                            then Node z (Node y Empty Empty)
                                   (Node x Empty Empty)
                            else Node x (Node y Empty Empty)
                                   (Node z Empty Empty)

(Goals: 3)
(Measures: 2)
(Spec size: 10)
(Solution size: 274)
N/AVL-RotateL
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("rotL0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("rotL0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("rotL0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("rotL0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)) (Binary And (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]))))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "x0"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PIf (Program {content = PApp (Program {content = PApp (Program {content = PSymbol ">=", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "-", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
rotL0 :: x:a -> l:{AVL {a|_v < x}|balFac _v == 0} -> r:{AVL {a|_v > x}|realHeight l - realHeight _v == 2} -> {AVL a|realHeight _v == 1 + realHeight l && elems _v == ([x] + elems l) + elems r}
rotL0 = \x . \l . \r . 
      match l with
        Leaf -> error
        Node x5 x6 x7 x8 -> Node x5 x6
                              (Node x x7 r x8) (inc x8)

(Goals: 4)
(Measures: 3)
(Spec size: 39)
(Solution size: 85)
N/AVL-RotateR
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("rotR0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("rotR0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("rotR0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("rotR0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"])) (IntLit 2)) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "x0"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PIf (Program {content = PApp (Program {content = PApp (Program {content = PSymbol ">=", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "-", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
rotR0 :: x:a -> l:AVL {a|_v < x} -> r:{AVL {a|_v > x}|realHeight _v - realHeight l == 2 && balFac _v == 0} -> {AVL a|realHeight _v == 1 + realHeight r && elems _v == ([x] + elems l) + elems r}
rotR0 = \x . \l . \r . 
      match r with
        Leaf -> error
        Node x5 x6 x7 x8 -> Node x5
                              (Node x l x6 x8) x7 (inc x8)

(Goals: 4)
(Measures: 3)
(Spec size: 40)
(Solution size: 85)
N/AVL-Balance
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])))) (IntLit 1))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("isLeftHeavy",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "t"]) (IntLit 0))))))),("isRightHeavy",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "t"]) (IntLit 0))))))),("isSkewed",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "t'" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t'"])) (IntLit 2)))))))),("nodeHeight",ForallT "a" (Monotype (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("rotL0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotR0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])))) (IntLit 1))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("isLeftHeavy",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "t"]) (IntLit 0))))))),("isRightHeavy",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "t"]) (IntLit 0))))))),("isSkewed",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "t'" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t'"])) (IntLit 2)))))))),("nodeHeight",ForallT "a" (Monotype (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("rotL0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotR0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])))) (IntLit 1))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isLeftHeavy",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "t"]) (IntLit 0))))))),("isRightHeavy",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "t"]) (IntLit 0))))))),("isSkewed",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "t'" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t'"])) (IntLit 2)))))))),("nodeHeight",ForallT "a" (Monotype (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("rotL0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotR0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])))) (IntLit 1))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("getHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("isLeftHeavy",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "t"]) (IntLit 0))))))),("isRightHeavy",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "t"]) (IntLit 0))))))),("isSkewed",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "t'" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t'"])) (IntLit 2)))))))),("nodeHeight",ForallT "a" (Monotype (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("rotL0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotR0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])))) (IntLit 1))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "x0"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("isLeftHeavy",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "t"]) (IntLit 0))))))),("isRightHeavy",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "t"]) (IntLit 0))))))),("isSkewed",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "t'" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t'"])) (IntLit 2)))))))),("nodeHeight",ForallT "a" (Monotype (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))),("rotL0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotLR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0))) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotR0",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Eq (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Gt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("rotRR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Eq (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"])) (IntLit 2)) (Binary Lt (Pred IntS "balFac" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])))) (IntLit 1))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PIf (Program {content = PApp (Program {content = PApp (Program {content = PSymbol ">=", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "-", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PSymbol "h", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
balance :: x:a -> l:AVL {a|_v < x} -> r:{AVL {a|_v > x}|isBal l _v 2} -> {AVL a|(balHt l r _v && bigHt l r _v) && elems _v == ([x] + elems l) + elems r}
balance = \x . \l . \r . 
      if (isSkewed l r) &&
           (isLeftHeavy l)
        then rotLL x l r
        else 
          if (isSkewed l r) &&
               (isRightHeavy l)
            then rotLR x l r
            else 
              if isSkewed l r
                then rotL0 x l r
                else 
                  if (isSkewed r l) &&
                       (isLeftHeavy r)
                    then rotRL x l r
                    else 
                      if (isSkewed r l) &&
                           (isRightHeavy r)
                        then rotRR x l r
                        else 
                          if isSkewed r l
                            then rotR0 x l r
                            else Node x l r (nodeHeight l r)

(Goals: 5)
(Measures: 4)
(Spec size: 37)
(Solution size: 183)
M/AVL-Insert
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("getHeight",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("getHeight",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("getHeight",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 2))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("getHeight",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])))))),("insert",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (IntLit 1)))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "x0"]))))))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (IntLit 1)))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "t"])))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PIf (Program {content = PApp (Program {content = PApp (Program {content = PSymbol ">=", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "-", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
insert :: y:a -> t:AVL a -> {AVL a|(realHeight t <= realHeight _v && realHeight _v <= realHeight t + 1) && elems _v == [y] + elems t}
insert = \y . \t . 
    match t with
      Leaf -> balance y Leaf Leaf
      Node x8 x9 x10 x11 -> 
        if x8 < y
          then balance x8 x9 (insert y
                                x10)
          else 
            if y < x8
              then balance x8 (insert y x9)
                     x10
              else t

(Goals: 4)
(Measures: 3)
(Spec size: 25)
(Solution size: 106)
M/AVL-ExtractMin
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "t"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Nothing",ForallT "a" (Monotype (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "Nothing" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "t"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Nothing",ForallT "a" (Monotype (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "Nothing" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "t"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Nothing",ForallT "a" (Monotype (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "Nothing" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "t"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Nothing",ForallT "a" (Monotype (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "Nothing" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("melems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "t"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Nothing",ForallT "a" (Monotype (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "Nothing" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("melems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("mheight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (Unary Neg (IntLit 1))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "t"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Nothing",ForallT "a" (Monotype (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "Nothing" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("extractMin",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])))) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Pred (SetS (VarS "a")) "melems" [Var (DataS "MinPair" [VarS "a"]) "_v"])) (Binary And (Binary Le (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Binary Plus (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (IntLit 1))))))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y"))))))))])
("env",FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "t"]) (Pred (SetS (VarS "a")) "melems" [Var (DataS "MinPair" [VarS "a"]) "_v"])) (Binary And (Binary Le (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Binary Plus (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (IntLit 1)))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PIf (Program {content = PApp (Program {content = PApp (Program {content = PSymbol ">=", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "-", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nothing", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "MinPair", argNames = ["x","t"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "t", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (Unary Neg (IntLit 1)))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nothing", argNames = [], expr = Program {content = PApp (Program {content = PSymbol "-", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}},Case {constructor = "MinPair", argNames = ["x","t"], expr = Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "t", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
extractMin :: t:AVL a -> {MinPair a|elems t == melems _v && eqOrOneLess (mheight _v) (realHeight t)}
extractMin = \t . 
  match t with
    Leaf -> Nothing
    Node x5 x6 x7 x8 -> 
      match extractMin x6 with
        Nothing -> MinPair x5 x7
        MinPair x14 x15 -> MinPair x14
                             (balance x5 x15 x7)

(Goals: 6)
(Measures: 5)
(Spec size: 18)
(Solution size: 106)
M/AVL-Delete
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "t"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Nothing",ForallT "a" (Monotype (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "Nothing" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("extractMin",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "t"]) (Pred (SetS (VarS "a")) "melems" [Var (DataS "MinPair" [VarS "a"]) "_v"])) (Binary And (Binary Le (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Binary Plus (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (IntLit 1))))))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("merge",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 1)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "t"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Nothing",ForallT "a" (Monotype (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "Nothing" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("extractMin",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "t"]) (Pred (SetS (VarS "a")) "melems" [Var (DataS "MinPair" [VarS "a"]) "_v"])) (Binary And (Binary Le (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Binary Plus (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (IntLit 1))))))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("merge",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 1)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "t"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Nothing",ForallT "a" (Monotype (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "Nothing" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("extractMin",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "t"]) (Pred (SetS (VarS "a")) "melems" [Var (DataS "MinPair" [VarS "a"]) "_v"])) (Binary And (Binary Le (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Binary Plus (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (IntLit 1))))))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("merge",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 1)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "t"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Nothing",ForallT "a" (Monotype (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "Nothing" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("extractMin",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "t"]) (Pred (SetS (VarS "a")) "melems" [Var (DataS "MinPair" [VarS "a"]) "_v"])) (Binary And (Binary Le (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Binary Plus (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (IntLit 1))))))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("melems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("merge",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 1)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "t"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Nothing",ForallT "a" (Monotype (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "Nothing" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balFac",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("extractMin",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "t"]) (Pred (SetS (VarS "a")) "melems" [Var (DataS "MinPair" [VarS "a"]) "_v"])) (Binary And (Binary Le (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Binary Plus (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (IntLit 1))))))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("melems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("merge",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 1)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("mheight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (Unary Neg (IntLit 1))))))),("realHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Leaf",ForallT "a" (Monotype (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Leaf" []))))),("MinPair",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "MinPair" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "t"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Le (Ite (Binary Ge (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 0)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Unary Neg (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])))) (IntLit 1))) (FunctionT "h" (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "AVL" [VarS "a"]) "_v") (Cons (DataS "AVL" [VarS "a"]) "Node" [Var (VarS "a") "x",Var (DataS "AVL" [VarS "a"]) "l",Var (DataS "AVL" [VarS "a"]) "r",Var IntS "h"]))))))))),("Nothing",ForallT "a" (Monotype (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "MinPair" [VarS "a"]) "_v") (Cons (DataS "MinPair" [VarS "a"]) "Nothing" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balance",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Or (Unary Not (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (IntLit 1) (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"]))))) (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1))))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"])))))))))),("delete",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "x0"]) (Binary Plus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 1)))) (Binary Eq (Binary Diff (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "x0"]) (SetLit (VarS "a") [Var (VarS "a") "y"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"])))))))),("extractMin",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "t"]) (Pred (SetS (VarS "a")) "melems" [Var (DataS "MinPair" [VarS "a"]) "_v"])) (Binary And (Binary Le (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Binary Plus (Pred IntS "mheight" [Var (DataS "MinPair" [VarS "a"]) "_v"]) (IntLit 1))))))))),("lt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("merge",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "r" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Le (Binary Minus (IntLit 0) (IntLit 1)) (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]))) (Binary Le (Binary Minus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (IntLit 1)))) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Le (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Plus (Ite (Binary Ge (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "r"])) (IntLit 1)))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "l"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "r"]))))))))))])
("env",FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"])) (Binary Le (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "t"]) (Binary Plus (Pred IntS "realHeight" [Var (DataS "AVL" [VarS "a"]) "_v"]) (IntLit 1)))) (Binary Eq (Binary Diff (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "y"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "AVL" [VarS "a"]) "_v"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PIf (Program {content = PApp (Program {content = PApp (Program {content = PSymbol ">=", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "-", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AVL" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Leaf", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","l","r","h"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nothing", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "MinPair", argNames = ["x","t"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "t", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "MinPair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (Unary Neg (IntLit 1)))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nothing", argNames = [], expr = Program {content = PApp (Program {content = PSymbol "-", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}},Case {constructor = "MinPair", argNames = ["x","t"], expr = Program {content = PApp (Program {content = PSymbol "realHeight", typeOf = AnyT}) (Program {content = PSymbol "t", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
delete :: y:a -> t:AVL a -> {AVL a|eqOrOneLess (realHeight _v) (realHeight t) && elems t - [y] == elems _v}
delete = \y . \t . 
    match t with
      Leaf -> t
      Node x5 x6 x7 x8 -> 
        if x5 < y
          then balance x5 x6 (delete y x7)
          else 
            if y < x5
              then balance x5 (delete y x6) x7
              else merge x5 x6 x7

(Goals: 6)
(Measures: 5)
(Spec size: 21)
(Solution size: 128)
N/RBT-BalanceL
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))) (FunctionT "llc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "ll" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "lx"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc"))) (FunctionT "lr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "lx") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x")))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"])))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"]))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "lx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))) (FunctionT "llc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "ll" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "lx"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc"))) (FunctionT "lr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "lx") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x")))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"])))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"]))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "lx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))) (FunctionT "llc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "ll" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "lx"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc"))) (FunctionT "lr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "lx") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x")))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"])))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"]))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "lx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))) (FunctionT "llc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "ll" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "lx"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc"))) (FunctionT "lr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "lx") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x")))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"])))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"]))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "lx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))) (FunctionT "llc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "ll" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "lx"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc"))) (FunctionT "lr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "lx") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x")))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"])))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"]))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "lx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))) (FunctionT "llc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "ll" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "lx"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc"))) (FunctionT "lr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "lx") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x")))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"])))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"]))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "lx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("welems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))) (FunctionT "llc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "ll" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "lx"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc"))) (FunctionT "lr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "lx") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x")))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"])))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"]))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "lx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("welems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("wheight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isOk",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))) (FunctionT "llc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "ll" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "lx"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc"))) (FunctionT "lr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "lx") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x")))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"])))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"]))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "lx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("welems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("wheight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isOk",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))) (FunctionT "llc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "ll" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "lx"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc"))) (FunctionT "lr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "lx") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x")))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"])))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"]))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "lx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wcolor",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary Le (Var IntS "_v") (IntLit 1))))))),("welems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("wheight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT IntT (Binary And (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))) (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary Lt (Var IntS "_v") (Var IntS "c"))))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "x0") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "x0") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "x0")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "x0") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateL",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))) (FunctionT "llc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "ll" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "lx"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc"))) (FunctionT "lr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "lx") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x")))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "llc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"])))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "ll"]))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "lx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "ll"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "lr"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))))))))))))])
("env",FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0)))))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","c","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "1", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","c","l","r"], expr = Program {content = PSymbol "c", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","c","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","c","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "c", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "blackHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "right", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "right", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "right", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "right", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "c", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "blackHeight", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PApp (Program {content = PSymbol "blackHeight", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PSymbol "True", typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PSymbol "False", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary Le (Var IntS "_v") (IntLit 1)))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PSymbol "c", typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PSymbol "0", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
balanceL :: y:a -> c:Color -> l:{WeakRBT {a|_v < y}|c == 0 ==> isOk _v} -> r:{RBT {a|_v > y}|(c == 0 ==> color _v == 1) && blackHeight _v == wheight l} -> {WeakRBT a|((welems _v == ([y] + welems l) + elems r && wheight _v == blackHeight r + c) && wsize _v == (1 + wsize l) + size r) && (isOk _v || c == 0)}
balanceL = \y . \c . \l . \r . 
        match l with
          Ok x5 x6 x7 x8 -> 
            if (c == 0) && (x6 == 0)
              then Bad x5 black x7 (Node y c
                                      x8 r)
              else Ok y c (Node x5 x6 x7 x8) r
          Bad x29 x30 x31 x32 -> rotateL y
                                   x29 x30 x31 x32 r

(Goals: 10)
(Measures: 9)
(Spec size: 89)
(Solution size: 204)
N/RBT-BalanceR
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "rx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))) (FunctionT "rlc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "rl" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "rx")))] []) (Binary And (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (FunctionT "rr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "rx") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "rx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rr"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rr"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "rx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))) (FunctionT "rlc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "rl" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "rx")))] []) (Binary And (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (FunctionT "rr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "rx") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "rx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rr"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rr"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "rx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))) (FunctionT "rlc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "rl" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "rx")))] []) (Binary And (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (FunctionT "rr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "rx") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "rx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rr"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rr"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "rx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))) (FunctionT "rlc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "rl" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "rx")))] []) (Binary And (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (FunctionT "rr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "rx") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "rx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rr"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rr"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "rx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))) (FunctionT "rlc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "rl" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "rx")))] []) (Binary And (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (FunctionT "rr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "rx") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "rx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rr"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rr"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "rx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))) (FunctionT "rlc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "rl" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "rx")))] []) (Binary And (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (FunctionT "rr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "rx") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "rx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rr"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rr"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("welems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "rx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))) (FunctionT "rlc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "rl" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "rx")))] []) (Binary And (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (FunctionT "rr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "rx") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "rx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rr"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rr"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("welems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("wheight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isOk",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "rx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))) (FunctionT "rlc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "rl" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "rx")))] []) (Binary And (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (FunctionT "rr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "rx") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "rx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rr"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rr"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("welems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("wheight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("isOk",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (BoolLit True))))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "rx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))) (FunctionT "rlc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "rl" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "rx")))] []) (Binary And (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (FunctionT "rr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "rx") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "rx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rr"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rr"]))))))))))))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wcolor",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary Le (Var IntS "_v") (IntLit 1))))))),("welems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("wheight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT IntT (Binary And (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))) (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary Lt (Var IntS "_v") (Var IntS "c"))))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "x0") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "x0") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "x0")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "x0") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("isRed",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("rotateR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (BoolLit True)) (FunctionT "rx" (ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))) (FunctionT "rlc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "rl" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary And (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v")) (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "rx")))] []) (Binary And (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (FunctionT "rr" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "rx") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "rlc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "wcolor" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (IntLit 0))) (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x",Var (VarS "a") "rx"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "rr"])))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (IntLit 1)))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Binary Plus (IntLit 2) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rl"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "rr"])))))))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0)))))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","c","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "1", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","c","l","r"], expr = Program {content = PSymbol "c", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","c","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","c","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "c", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "blackHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "right", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "right", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "right", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "right", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "c", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "blackHeight", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PApp (Program {content = PSymbol "blackHeight", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PSymbol "True", typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PSymbol "False", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary Le (Var IntS "_v") (IntLit 1)))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PSymbol "c", typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PSymbol "0", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
balanceR :: x:a -> c:Color -> l:{RBT {a|_v < x}|c == 0 ==> color _v == 1} -> r:{WeakRBT {a|_v > x}|(c == 0 ==> isOk _v) && wheight _v == blackHeight l} -> {WeakRBT a|((welems _v == ([x] + elems l) + welems r && wheight _v == blackHeight l + c) && wsize _v == (1 + size l) + wsize r) && (isOk _v || c == 0)}
balanceR = \x . \c . \l . \r . 
        match r with
          Ok x5 x6 x7 x8 -> 
            if (c == 0) && (x6 == 0)
              then Bad x black l (Node x5 c x7
                                    x8)
              else Ok x c l (Node x5 x6 x7 x8)
          Bad x29 x30 x31 x32 -> rotateR x
                                   l x29 x30 x31 x32

(Goals: 10)
(Measures: 9)
(Spec size: 89)
(Solution size: 204)
M/RBT-Insert
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("ins",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Le (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (Binary Le (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 1)))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 0))))))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("mkBlack",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "t"])))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("red",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0)))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("ins",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Le (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (Binary Le (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 1)))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 0))))))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("mkBlack",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "t"])))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("red",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0)))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ins",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Le (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (Binary Le (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 1)))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 0))))))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("mkBlack",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "t"])))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("red",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0)))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ins",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Le (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (Binary Le (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 1)))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 0))))))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("mkBlack",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "t"])))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("red",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0)))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ins",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Le (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (Binary Le (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 1)))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 0))))))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("mkBlack",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "t"])))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("red",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0)))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ins",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Le (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (Binary Le (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 1)))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 0))))))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("mkBlack",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "t"])))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("red",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0)))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("welems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ins",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Le (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (Binary Le (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 1)))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 0))))))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("mkBlack",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "t"])))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("red",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0)))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("welems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("wheight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ins",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Le (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (Binary Le (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 1)))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 0))))))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("isOk",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (BoolLit True))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("mkBlack",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "t"])))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("red",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0)))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("welems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("wheight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("blackHeight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("color",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ins",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Le (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (Binary Le (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 1)))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 0))))))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("isOk",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (BoolLit True))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("mkBlack",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "t"])))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("red",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0)))),("size",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wcolor",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary Le (Var IntS "_v") (IntLit 1))))))),("welems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("wheight",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("wsize",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Bad",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "lc" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc"))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Neq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Var IntS "lc")) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Bad" [Var (VarS "a") "x",Var IntS "lc",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Empty",ForallT "a" (Monotype (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Empty" []))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Node",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "col" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "col") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "RBT" [VarS "a"]) "_v") (Cons (DataS "RBT" [VarS "a"]) "Node" [Var (VarS "a") "x",Var IntS "col",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Ok",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "left" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "right" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "left"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "WeakRBT" [VarS "a"]) "_v") (Cons (DataS "WeakRBT" [VarS "a"]) "Ok" [Var (VarS "a") "x",Var IntS "c",Var (DataS "RBT" [VarS "a"]) "left",Var (DataS "RBT" [VarS "a"]) "right"]))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("balanceL",ForallT "a" (Monotype (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (FunctionT "r" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "y"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1))) (Binary Eq (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "y"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "r"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "l"])) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("balanceR",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "c" (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))) (FunctionT "l" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 1)))) (FunctionT "r" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (Binary Gt (Var (VarS "a") "_v") (Var (VarS "a") "x"))] []) (Binary And (Binary Implies (Binary Eq (Var IntS "c") (IntLit 0)) (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"])) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"])))) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "r"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "l"]) (Var IntS "c")))) (Binary Eq (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (IntLit 1) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "l"])) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "r"])))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Var IntS "c") (IntLit 0))))))))))),("black",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 1)))),("ins",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary And (Binary And (Binary Eq (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Union (SetLit (VarS "a") [Var (VarS "a") "x"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Eq (Pred IntS "wheight" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Pred IntS "blackHeight" [Var (DataS "RBT" [VarS "a"]) "t"]))) (Binary Le (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]))) (Binary Le (Pred IntS "wsize" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 1)))) (Binary Or (Pred BoolS "isOk" [Var (DataS "WeakRBT" [VarS "a"]) "_v"]) (Binary Eq (Pred IntS "color" [Var (DataS "RBT" [VarS "a"]) "t"]) (IntLit 0))))))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred IntS "size" [Var (DataS "RBT" [VarS "a"]) "t"])))) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "x0"]) (SetLit (VarS "a") [Var (VarS "a") "x"])))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("mkBlack",ForallT "a" (Monotype (FunctionT "t" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "welems" [Var (DataS "WeakRBT" [VarS "a"]) "t"])))))),("neq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Neq (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("red",Monotype (ScalarT IntT (Binary Eq (Var IntS "_v") (IntLit 0))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "t" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "RBT" [VarS "a"]) "t"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","c","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Le (IntLit 0) (Var IntS "_v")) (Binary Le (Var IntS "_v") (IntLit 1)))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "1", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","c","l","r"], expr = Program {content = PSymbol "c", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","c","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "r", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "RBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Empty", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Node", argNames = ["x","c","l","r"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "c", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "blackHeight", typeOf = AnyT}) (Program {content = PSymbol "l", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "right", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "size", typeOf = AnyT}) (Program {content = PSymbol "right", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "right", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "right", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "c", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "blackHeight", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PApp (Program {content = PSymbol "blackHeight", typeOf = AnyT}) (Program {content = PSymbol "left", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PSymbol "True", typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PSymbol "False", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "WeakRBT" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary Le (Var IntS "_v") (IntLit 1)))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Ok", argNames = ["x","c","left","right"], expr = Program {content = PSymbol "c", typeOf = AnyT}},Case {constructor = "Bad", argNames = ["x","lc","left","right"], expr = Program {content = PSymbol "0", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
insert :: x:a -> t:RBT a -> {RBT a|elems _v == elems t + [x]}
insert = \x . \t . mkBlack (ins
                              x t)

(Goals: 10)
(Measures: 9)
(Spec size: 34)
(Solution size: 146)
C1/AddressBook-Make
("env",fromList [("Address",Monotype (FunctionT "info" (ScalarT (DatatypeT "Info" [] []) (BoolLit True)) (FunctionT "priv" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Address" [] []) (Binary Eq (Var (DataS "Address" []) "_v") (Cons (DataS "Address" []) "Address" [Var (DataS "Info" []) "info",Var BoolS "priv"])))))),("AddressBook",Monotype (FunctionT "business" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Unary Not (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"]))] []) (BoolLit True)) (FunctionT "personal" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"])] []) (BoolLit True)) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Var (DataS "AddressBook" []) "_v") (Cons (DataS "AddressBook" []) "AddressBook" [Var (DataS "List" [DataS "Address" []]) "business",Var (DataS "List" [DataS "Address" []]) "personal"])))))),("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Info",Monotype (FunctionT "streetAddr" (ScalarT IntT (BoolLit True)) (FunctionT "zipcode" (ScalarT IntT (BoolLit True)) (FunctionT "local" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Info" [] []) (Binary Eq (Var (DataS "Info" []) "_v") (Cons (DataS "Info" []) "Info" [Var IntS "streetAddr",Var IntS "zipcode",Var BoolS "local"]))))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("getPriv",Monotype (FunctionT "a" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Pred BoolS "isPriv" [Var (DataS "Address" []) "a"]))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Address",Monotype (FunctionT "info" (ScalarT (DatatypeT "Info" [] []) (BoolLit True)) (FunctionT "priv" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Address" [] []) (Binary Eq (Var (DataS "Address" []) "_v") (Cons (DataS "Address" []) "Address" [Var (DataS "Info" []) "info",Var BoolS "priv"])))))),("AddressBook",Monotype (FunctionT "business" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Unary Not (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"]))] []) (BoolLit True)) (FunctionT "personal" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"])] []) (BoolLit True)) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Var (DataS "AddressBook" []) "_v") (Cons (DataS "AddressBook" []) "AddressBook" [Var (DataS "List" [DataS "Address" []]) "business",Var (DataS "List" [DataS "Address" []]) "personal"])))))),("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Info",Monotype (FunctionT "streetAddr" (ScalarT IntT (BoolLit True)) (FunctionT "zipcode" (ScalarT IntT (BoolLit True)) (FunctionT "local" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Info" [] []) (Binary Eq (Var (DataS "Info" []) "_v") (Cons (DataS "Info" []) "Info" [Var IntS "streetAddr",Var IntS "zipcode",Var BoolS "local"]))))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("getPriv",Monotype (FunctionT "a" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Pred BoolS "isPriv" [Var (DataS "Address" []) "a"]))))),("isPriv",Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (BoolLit True)))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Address",Monotype (FunctionT "info" (ScalarT (DatatypeT "Info" [] []) (BoolLit True)) (FunctionT "priv" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Address" [] []) (Binary Eq (Var (DataS "Address" []) "_v") (Cons (DataS "Address" []) "Address" [Var (DataS "Info" []) "info",Var BoolS "priv"])))))),("AddressBook",Monotype (FunctionT "business" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Unary Not (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"]))] []) (BoolLit True)) (FunctionT "personal" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"])] []) (BoolLit True)) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Var (DataS "AddressBook" []) "_v") (Cons (DataS "AddressBook" []) "AddressBook" [Var (DataS "List" [DataS "Address" []]) "business",Var (DataS "List" [DataS "Address" []]) "personal"])))))),("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Info",Monotype (FunctionT "streetAddr" (ScalarT IntT (BoolLit True)) (FunctionT "zipcode" (ScalarT IntT (BoolLit True)) (FunctionT "local" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Info" [] []) (Binary Eq (Var (DataS "Info" []) "_v") (Cons (DataS "Info" []) "Info" [Var IntS "streetAddr",Var IntS "zipcode",Var BoolS "local"]))))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("getPriv",Monotype (FunctionT "a" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Pred BoolS "isPriv" [Var (DataS "Address" []) "a"]))))),("isPriv",Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (BoolLit True)))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("size",Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AddressBook" [] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))])
("env",fromList [("Address",Monotype (FunctionT "info" (ScalarT (DatatypeT "Info" [] []) (BoolLit True)) (FunctionT "priv" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Address" [] []) (Binary Eq (Var (DataS "Address" []) "_v") (Cons (DataS "Address" []) "Address" [Var (DataS "Info" []) "info",Var BoolS "priv"])))))),("AddressBook",Monotype (FunctionT "business" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Unary Not (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"]))] []) (BoolLit True)) (FunctionT "personal" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"])] []) (BoolLit True)) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Var (DataS "AddressBook" []) "_v") (Cons (DataS "AddressBook" []) "AddressBook" [Var (DataS "List" [DataS "Address" []]) "business",Var (DataS "List" [DataS "Address" []]) "personal"])))))),("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Info",Monotype (FunctionT "streetAddr" (ScalarT IntT (BoolLit True)) (FunctionT "zipcode" (ScalarT IntT (BoolLit True)) (FunctionT "local" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Info" [] []) (Binary Eq (Var (DataS "Info" []) "_v") (Cons (DataS "Info" []) "Info" [Var IntS "streetAddr",Var IntS "zipcode",Var BoolS "local"]))))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("getPriv",Monotype (FunctionT "a" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Pred BoolS "isPriv" [Var (DataS "Address" []) "a"]))))),("mkAddressBook",Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [DataS "Address" []]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [DataS "Address" []]) "_v"]) (Pred IntS "len" [Var (DataS "List" [DataS "Address" []]) "adds"])))) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Pred IntS "size" [Var (DataS "AddressBook" []) "_v"]) (Pred IntS "len" [Var (DataS "List" [DataS "Address" []]) "x0"])))))])
("env",FunctionT "adds" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Pred IntS "size" [Var (DataS "AddressBook" []) "_v"]) (Pred IntS "len" [Var (DataS "List" [DataS "Address" []]) "adds"]))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Address", argNames = ["info","priv"], expr = Program {content = PSymbol "priv", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AddressBook" [] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "AddressBook", argNames = ["bs","ps"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "bs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "ps", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
mkAddressBook :: adds:List Address -> {AddressBook|size _v == len adds}
mkAddressBook = \adds . 
  match adds with
    Nil -> AddressBook Nil Nil
    Cons x5 x6 -> 
      match mkAddressBook x6 with
        AddressBook x10 x11 -> 
          if getPriv x5
            then AddressBook x10 (Cons x5
                                    x11)
            else AddressBook (Cons x5 x10)
                   x11

(Goals: 4)
(Measures: 3)
(Spec size: 11)
(Solution size: 61)
N/AddressBook-Merge
("env",fromList [("Address",Monotype (FunctionT "info" (ScalarT (DatatypeT "Info" [] []) (BoolLit True)) (FunctionT "priv" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Address" [] []) (Binary Eq (Var (DataS "Address" []) "_v") (Cons (DataS "Address" []) "Address" [Var (DataS "Info" []) "info",Var BoolS "priv"])))))),("AddressBook",Monotype (FunctionT "business" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Unary Not (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"]))] []) (BoolLit True)) (FunctionT "personal" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"])] []) (BoolLit True)) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Var (DataS "AddressBook" []) "_v") (Cons (DataS "AddressBook" []) "AddressBook" [Var (DataS "List" [DataS "Address" []]) "business",Var (DataS "List" [DataS "Address" []]) "personal"])))))),("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Info",Monotype (FunctionT "streetAddr" (ScalarT IntT (BoolLit True)) (FunctionT "zipcode" (ScalarT IntT (BoolLit True)) (FunctionT "local" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Info" [] []) (Binary Eq (Var (DataS "Info" []) "_v") (Cons (DataS "Info" []) "Info" [Var IntS "streetAddr",Var IntS "zipcode",Var BoolS "local"]))))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("getPriv",Monotype (FunctionT "a" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Pred BoolS "isPriv" [Var (DataS "Address" []) "a"]))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("mergeAddressBooks",Monotype (FunctionT "a" (ScalarT (DatatypeT "AddressBook" [] []) (BoolLit True)) (FunctionT "b" (ScalarT (DatatypeT "AddressBook" [] []) (BoolLit True)) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Pred IntS "size" [Var (DataS "AddressBook" []) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "AddressBook" []) "a"]) (Pred IntS "size" [Var (DataS "AddressBook" []) "b"])))))))])
("env",fromList [("Address",Monotype (FunctionT "info" (ScalarT (DatatypeT "Info" [] []) (BoolLit True)) (FunctionT "priv" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Address" [] []) (Binary Eq (Var (DataS "Address" []) "_v") (Cons (DataS "Address" []) "Address" [Var (DataS "Info" []) "info",Var BoolS "priv"])))))),("AddressBook",Monotype (FunctionT "business" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Unary Not (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"]))] []) (BoolLit True)) (FunctionT "personal" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"])] []) (BoolLit True)) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Var (DataS "AddressBook" []) "_v") (Cons (DataS "AddressBook" []) "AddressBook" [Var (DataS "List" [DataS "Address" []]) "business",Var (DataS "List" [DataS "Address" []]) "personal"])))))),("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Info",Monotype (FunctionT "streetAddr" (ScalarT IntT (BoolLit True)) (FunctionT "zipcode" (ScalarT IntT (BoolLit True)) (FunctionT "local" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Info" [] []) (Binary Eq (Var (DataS "Info" []) "_v") (Cons (DataS "Info" []) "Info" [Var IntS "streetAddr",Var IntS "zipcode",Var BoolS "local"]))))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("getPriv",Monotype (FunctionT "a" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Pred BoolS "isPriv" [Var (DataS "Address" []) "a"]))))),("isPriv",Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (BoolLit True)))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("mergeAddressBooks",Monotype (FunctionT "a" (ScalarT (DatatypeT "AddressBook" [] []) (BoolLit True)) (FunctionT "b" (ScalarT (DatatypeT "AddressBook" [] []) (BoolLit True)) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Pred IntS "size" [Var (DataS "AddressBook" []) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "AddressBook" []) "a"]) (Pred IntS "size" [Var (DataS "AddressBook" []) "b"])))))))])
("env",fromList [("Address",Monotype (FunctionT "info" (ScalarT (DatatypeT "Info" [] []) (BoolLit True)) (FunctionT "priv" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Address" [] []) (Binary Eq (Var (DataS "Address" []) "_v") (Cons (DataS "Address" []) "Address" [Var (DataS "Info" []) "info",Var BoolS "priv"])))))),("AddressBook",Monotype (FunctionT "business" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Unary Not (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"]))] []) (BoolLit True)) (FunctionT "personal" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"])] []) (BoolLit True)) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Var (DataS "AddressBook" []) "_v") (Cons (DataS "AddressBook" []) "AddressBook" [Var (DataS "List" [DataS "Address" []]) "business",Var (DataS "List" [DataS "Address" []]) "personal"])))))),("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Info",Monotype (FunctionT "streetAddr" (ScalarT IntT (BoolLit True)) (FunctionT "zipcode" (ScalarT IntT (BoolLit True)) (FunctionT "local" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Info" [] []) (Binary Eq (Var (DataS "Info" []) "_v") (Cons (DataS "Info" []) "Info" [Var IntS "streetAddr",Var IntS "zipcode",Var BoolS "local"]))))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("getPriv",Monotype (FunctionT "a" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Pred BoolS "isPriv" [Var (DataS "Address" []) "a"]))))),("isPriv",Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (BoolLit True)))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("mergeAddressBooks",Monotype (FunctionT "a" (ScalarT (DatatypeT "AddressBook" [] []) (BoolLit True)) (FunctionT "b" (ScalarT (DatatypeT "AddressBook" [] []) (BoolLit True)) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Pred IntS "size" [Var (DataS "AddressBook" []) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "AddressBook" []) "a"]) (Pred IntS "size" [Var (DataS "AddressBook" []) "b"]))))))),("size",Monotype (FunctionT "arg0" (ScalarT (DatatypeT "AddressBook" [] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))])
("env",fromList [("Address",Monotype (FunctionT "info" (ScalarT (DatatypeT "Info" [] []) (BoolLit True)) (FunctionT "priv" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Address" [] []) (Binary Eq (Var (DataS "Address" []) "_v") (Cons (DataS "Address" []) "Address" [Var (DataS "Info" []) "info",Var BoolS "priv"])))))),("AddressBook",Monotype (FunctionT "business" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Unary Not (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"]))] []) (BoolLit True)) (FunctionT "personal" (ScalarT (DatatypeT "List" [ScalarT (DatatypeT "Address" [] []) (Pred BoolS "isPriv" [Var (DataS "Address" []) "_v"])] []) (BoolLit True)) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Var (DataS "AddressBook" []) "_v") (Cons (DataS "AddressBook" []) "AddressBook" [Var (DataS "List" [DataS "Address" []]) "business",Var (DataS "List" [DataS "Address" []]) "personal"])))))),("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Info",Monotype (FunctionT "streetAddr" (ScalarT IntT (BoolLit True)) (FunctionT "zipcode" (ScalarT IntT (BoolLit True)) (FunctionT "local" (ScalarT BoolT (BoolLit True)) (ScalarT (DatatypeT "Info" [] []) (Binary Eq (Var (DataS "Info" []) "_v") (Cons (DataS "Info" []) "Info" [Var IntS "streetAddr",Var IntS "zipcode",Var BoolS "local"]))))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("getPriv",Monotype (FunctionT "a" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Pred BoolS "isPriv" [Var (DataS "Address" []) "a"])))))])
("env",FunctionT "a" (ScalarT (DatatypeT "AddressBook" [] []) (BoolLit True)) (FunctionT "b" (ScalarT (DatatypeT "AddressBook" [] []) (BoolLit True)) (ScalarT (DatatypeT "AddressBook" [] []) (Binary Eq (Pred IntS "size" [Var (DataS "AddressBook" []) "_v"]) (Binary Plus (Pred IntS "size" [Var (DataS "AddressBook" []) "a"]) (Pred IntS "size" [Var (DataS "AddressBook" []) "b"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Address" [] []) (BoolLit True)) (ScalarT BoolT (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Address", argNames = ["info","priv"], expr = Program {content = PSymbol "priv", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "AddressBook" [] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "AddressBook", argNames = ["bs","ps"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "bs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "ps", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
mergeAddressBooks :: a:AddressBook -> b:AddressBook -> {AddressBook|size _v == size a + size b}
mergeAddressBooks = \a . \b . 
    match a with
      AddressBook x2 x3 -> 
        match b with
          AddressBook x6 x7 -> AddressBook
                                 (append x2 x6) (append x3 x7)

(Goals: 4)
(Measures: 3)
(Spec size: 14)
(Solution size: 46)
Resyn/List-Triple1
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "ys"]))))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("triple",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "arg0"])))) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "ys"]))))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("triple",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "ys"]))))))))),("triple",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"])))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
triple :: xs:List a -> {List a|len _v == (len xs + len xs) + len xs}
triple = \xs . append xs (append
                            xs xs)

(Goals: 3)
(Measures: 2)
(Spec size: 14)
(Solution size: 34)
Resyn/List-Triple2
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a"]) "_v") (Cons (DataS "Pair" [VarS "a"]) "Pair" [Var (DataS "List" [VarS "a"]) "xs",Var (DataS "List" [VarS "a"]) "ys"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xys" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [VarS "a"]) "xys"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [VarS "a"]) "xys"]]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "pelems" [Var (DataS "Pair" [VarS "a"]) "xys"]))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("triple",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a"]) "_v") (Cons (DataS "Pair" [VarS "a"]) "Pair" [Var (DataS "List" [VarS "a"]) "xs",Var (DataS "List" [VarS "a"]) "ys"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xys" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [VarS "a"]) "xys"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [VarS "a"]) "xys"]]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "pelems" [Var (DataS "Pair" [VarS "a"]) "xys"]))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("triple",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a"]) "_v") (Cons (DataS "Pair" [VarS "a"]) "Pair" [Var (DataS "List" [VarS "a"]) "xs",Var (DataS "List" [VarS "a"]) "ys"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xys" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [VarS "a"]) "xys"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [VarS "a"]) "xys"]]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "pelems" [Var (DataS "Pair" [VarS "a"]) "xys"]))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("plen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("triple",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a"]) "_v") (Cons (DataS "Pair" [VarS "a"]) "Pair" [Var (DataS "List" [VarS "a"]) "xs",Var (DataS "List" [VarS "a"]) "ys"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xys" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [VarS "a"]) "xys"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [VarS "a"]) "xys"]]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "pelems" [Var (DataS "Pair" [VarS "a"]) "xys"]))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("pelems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("plen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("triple",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a"]) "_v") (Cons (DataS "Pair" [VarS "a"]) "Pair" [Var (DataS "List" [VarS "a"]) "xs",Var (DataS "List" [VarS "a"]) "ys"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xys" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [VarS "a"]) "xys"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [VarS "a"]) "xys"]]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "pelems" [Var (DataS "Pair" [VarS "a"]) "xys"]))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("fst",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("pelems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("plen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("triple",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a"]) "_v") (Cons (DataS "Pair" [VarS "a"]) "Pair" [Var (DataS "List" [VarS "a"]) "xs",Var (DataS "List" [VarS "a"]) "ys"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xys" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [VarS "a"]) "xys"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [VarS "a"]) "xys"]]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "pelems" [Var (DataS "Pair" [VarS "a"]) "xys"]))))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("fst",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("pelems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("plen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("snd",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("triple",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Pair",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a"]) "_v") (Cons (DataS "Pair" [VarS "a"]) "Pair" [Var (DataS "List" [VarS "a"]) "xs",Var (DataS "List" [VarS "a"]) "ys"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xys" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "fst" [Var (DataS "Pair" [VarS "a"]) "xys"]]) (Pred IntS "len" [Pred (DataS "List" [VarS "a"]) "snd" [Var (DataS "Pair" [VarS "a"]) "xys"]]))) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred (SetS (VarS "a")) "pelems" [Var (DataS "Pair" [VarS "a"]) "xys"]))))))),("triple",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"])))))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Binary Plus (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["xs","ys"], expr = Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "ys", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["xs","ys"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "ys", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["xs","ys"], expr = Program {content = PSymbol "xs", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["xs","ys"], expr = Program {content = PSymbol "ys", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
triple :: xs:List a -> {List a|len _v == (len xs + len xs) + len xs}
triple = \xs . append (Pair xs
                         (append (Pair xs xs)))

(Goals: 7)
(Measures: 6)
(Spec size: 17)
(Solution size: 64)
Resyn/List-Concat
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Cons2",ForallT "a" (Monotype (FunctionT "x" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Cons2" [Var (DataS "List" [VarS "a"]) "x",Var (DataS "ListOfLists" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Nil2",ForallT "a" (Monotype (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Nil2" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("concat",ForallT "a" (Monotype (FunctionT "xss" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "acc" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "sumLen" [Var (DataS "ListOfLists" [VarS "a"]) "xss"]) (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "acc"])))))))),("len1",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Cons2",ForallT "a" (Monotype (FunctionT "x" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Cons2" [Var (DataS "List" [VarS "a"]) "x",Var (DataS "ListOfLists" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Nil2",ForallT "a" (Monotype (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Nil2" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("concat",ForallT "a" (Monotype (FunctionT "xss" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "acc" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "sumLen" [Var (DataS "ListOfLists" [VarS "a"]) "xss"]) (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "acc"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("len1",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Cons2",ForallT "a" (Monotype (FunctionT "x" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Cons2" [Var (DataS "List" [VarS "a"]) "x",Var (DataS "ListOfLists" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Nil2",ForallT "a" (Monotype (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Nil2" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("concat",ForallT "a" (Monotype (FunctionT "xss" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "acc" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "sumLen" [Var (DataS "ListOfLists" [VarS "a"]) "xss"]) (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "acc"])))))))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("len1",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("sumLen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Cons2",ForallT "a" (Monotype (FunctionT "x" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Cons2" [Var (DataS "List" [VarS "a"]) "x",Var (DataS "ListOfLists" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Nil2",ForallT "a" (Monotype (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "ListOfLists" [VarS "a"]) "_v") (Cons (DataS "ListOfLists" [VarS "a"]) "Nil2" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("append",ForallT "a" (Monotype (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("concat",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "ListOfLists" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "ListOfLists" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "ListOfLists" [VarS "a"]) "xss"])))) (FunctionT "acc" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "sumLen" [Var (DataS "ListOfLists" [VarS "a"]) "x0"]) (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "acc"]))))))))])
("env",FunctionT "xss" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "acc" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Plus (Pred IntS "sumLen" [Var (DataS "ListOfLists" [VarS "a"]) "xss"]) (Pred IntS "len1" [Var (DataS "List" [VarS "a"]) "acc"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len1", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil2", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons2", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "ListOfLists" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil2", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons2", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "sumLen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len1", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
concat :: xss:ListOfLists a -> acc:List a -> {List a|len1 _v == sumLen xss + len1 acc}
concat = \xss . \acc . 
    match xss with
      Nil2 -> acc
      Cons2 x3 x4 -> append acc
                       (concat x4 x3)

(Goals: 4)
(Measures: 3)
(Spec size: 17)
(Solution size: 49)
Resyn/List-Intersect
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("llen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("llen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("llen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("llen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("intersect",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "l1"])))) (FunctionT "x1" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "l2"]))) (Binary Or (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "x0"]) (IntLit 0)) (Binary Lt (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "x0"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "l1"]))) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "l2"])))))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Intersect (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "x0"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "x1"]))))))))])
("env",FunctionT "l1" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "l2" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Intersect (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "l1"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "l2"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "llen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
intersect :: l1:IList a -> l2:IList a -> {List a|elems _v == ielems l1 * ielems l2}
intersect = \l1 . \l2 . 
    match l1 with
      INil -> Nil
      ICons x4 x5 -> 
        match l2 with
          INil -> Nil
          ICons x8 x9 -> 
            if x8 < x4
              then intersect l1 x9
              else 
                if x4 < x8
                  then intersect x5 l2
                  else Cons x4 (intersect l1 x9)

(Goals: 5)
(Measures: 4)
(Spec size: 14)
(Solution size: 87)
Resyn/List-Diff
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("llen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("llen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("llen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("elems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("llen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("diff",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "l1"])))) (FunctionT "x1" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Le (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "l2"]))) (Binary Or (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "x0"]) (IntLit 0)) (Binary Lt (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "x0"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "l1"]))) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "l2"])))))) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Diff (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "x0"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "x1"]))))))))])
("env",FunctionT "l1" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "l2" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "elems" [Var (DataS "List" [VarS "a"]) "_v"]) (Binary Diff (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "l1"]) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "l2"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "llen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "elems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
diff :: l1:IList a -> l2:IList a -> {List a|elems _v == ielems l1 - ielems l2}
diff = \l1 . \l2 . 
    match l1 with
      INil -> Nil
      ICons x4 x5 -> 
        match l2 with
          INil -> Cons x4 (diff x5 l2)
          ICons x12 x13 -> 
            if x12 < x4
              then diff l1 x13
              else 
                if x4 < x12
                  then Cons x4 (diff x5 l2)
                  else diff x5 l2

(Goals: 5)
(Measures: 4)
(Spec size: 14)
(Solution size: 95)
Resyn/List-Insert-Fine
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("numgt",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])))) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "x0"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))))))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "_v"]) (Binary Union (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]) (SetLit (VarS "a") [Var (VarS "a") "x"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))),Program {content = PFun "x" (Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["y","ys"], expr = Program {content = PIf (Program {content = PApp (Program {content = PApp (Program {content = PSymbol ">=", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PSymbol "y", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "numgt", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PSymbol "ys", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PApp (Program {content = PSymbol "numgt", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PSymbol "ys", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT})
insert :: x:a -> xs:IList a -> {IList a|ielems _v == ielems xs + [x]}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x5 < x
          then ICons x5 (insert x x6)
          else ICons x (ICons x5 x6)

(Goals: 4)
(Measures: 3)
(Spec size: 14)
(Solution size: 82)
Resyn/List-Range
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Pair",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (Binary Ge (Var IntS "_v") (Var IntS "x"))) (ScalarT (DatatypeT "Pair" [] []) (Binary Eq (Var (DataS "Pair" []) "_v") (Cons (DataS "Pair" []) "Pair" [Var IntS "x",Var IntS "y"])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Pair",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (Binary Ge (Var IntS "_v") (Var IntS "x"))) (ScalarT (DatatypeT "Pair" [] []) (Binary Eq (Var (DataS "Pair" []) "_v") (Cons (DataS "Pair" []) "Pair" [Var IntS "x",Var IntS "y"])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1))))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Pair",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (Binary Ge (Var IntS "_v") (Var IntS "x"))) (ScalarT (DatatypeT "Pair" [] []) (Binary Eq (Var (DataS "Pair" []) "_v") (Cons (DataS "Pair" []) "Pair" [Var IntS "x",Var IntS "y"])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("len",Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Pair",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (Binary Ge (Var IntS "_v") (Var IntS "x"))) (ScalarT (DatatypeT "Pair" [] []) (Binary Eq (Var (DataS "Pair" []) "_v") (Cons (DataS "Pair" []) "Pair" [Var IntS "x",Var IntS "y"])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("fst",Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [] []) (BoolLit True)) (ScalarT IntT (BoolLit True)))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("len",Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Pair",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (Binary Ge (Var IntS "_v") (Var IntS "x"))) (ScalarT (DatatypeT "Pair" [] []) (Binary Eq (Var (DataS "Pair" []) "_v") (Cons (DataS "Pair" []) "Pair" [Var IntS "x",Var IntS "y"])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("fst",Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [] []) (BoolLit True)) (ScalarT IntT (BoolLit True)))),("ielems",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True))))),("ilen",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("len",Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))),("snd",Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [] []) (BoolLit True)) (ScalarT IntT (BoolLit True))))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Lt (Var (VarS "a") "x") (Var (VarS "a") "_v"))] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"]))))))),("INil",ForallT "a" (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Pair",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (Binary Ge (Var IntS "_v") (Var IntS "x"))) (ScalarT (DatatypeT "Pair" [] []) (Binary Eq (Var (DataS "Pair" []) "_v") (Cons (DataS "Pair" []) "Pair" [Var IntS "x",Var IntS "y"])))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("inc",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (IntLit 1)))))),("range",Monotype (FunctionT "x0" (ScalarT (DatatypeT "Pair" [] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "Pair" []) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "Pair" []) "_v"]) (Pred IntS "len" [Var (DataS "Pair" []) "p"])))) (ScalarT (DatatypeT "IList" [ScalarT IntT (Binary And (Binary Le (Pred IntS "fst" [Var (DataS "Pair" []) "x0"]) (Var IntS "_v")) (Binary Le (Var IntS "_v") (Pred IntS "snd" [Var (DataS "Pair" []) "x0"])))] []) (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [IntS]) "_v"]) (Binary Minus (Pred IntS "snd" [Var (DataS "Pair" []) "x0"]) (Pred IntS "fst" [Var (DataS "Pair" []) "x0"]))))))])
("env",FunctionT "p" (ScalarT (DatatypeT "Pair" [] []) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT IntT (Binary And (Binary Le (Pred IntS "fst" [Var (DataS "Pair" []) "p"]) (Var IntS "_v")) (Binary Le (Var IntS "_v") (Pred IntS "snd" [Var (DataS "Pair" []) "p"])))] []) (Binary Eq (Pred IntS "ilen" [Var (DataS "IList" [IntS]) "_v"]) (Binary Minus (Pred IntS "snd" [Var (DataS "Pair" []) "p"]) (Pred IntS "fst" [Var (DataS "Pair" []) "p"])))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["x","y"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "-", typeOf = AnyT}) (Program {content = PSymbol "y", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [] []) (BoolLit True)) (ScalarT IntT (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["xs","ys"], expr = Program {content = PSymbol "xs", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [] []) (BoolLit True)) (ScalarT IntT (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["xs","ys"], expr = Program {content = PSymbol "ys", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
range :: p:Pair -> {IList {Int|fst p <= _v && _v <= snd p}|ilen _v == snd p - fst p}
range = \p . 
  match p with
    Pair x3 x4 -> 
      if x3 >= x4
        then INil
        else ICons x3 (range (Pair (inc
                                      x3) x4))

(Goals: 6)
(Measures: 5)
(Spec size: 23)
(Solution size: 63)
Resyn/List-LenCompare
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("and",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (FunctionT "y" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary And (Var BoolS "x") (Var BoolS "y"))))))),("false",Monotype (ScalarT BoolT (Binary Eq (Var BoolS "_v") (BoolLit False)))),("len",ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0)))))),("true",Monotype (ScalarT BoolT (Binary Eq (Var BoolS "_v") (BoolLit True))))])
("env",fromList [("Cons",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Cons" [Var (VarS "a") "x",Var (DataS "List" [VarS "a"]) "xs"]))))))),("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Nil",ForallT "a" (Monotype (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "List" [VarS "a"]) "_v") (Cons (DataS "List" [VarS "a"]) "Nil" []))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("and",Monotype (FunctionT "x" (ScalarT BoolT (BoolLit True)) (FunctionT "y" (ScalarT BoolT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary And (Var BoolS "x") (Var BoolS "y"))))))),("compare",ForallT "a" (Monotype (FunctionT "x0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Ge (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Lt (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "_v"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"])))) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "x0"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"])))))))),("false",Monotype (ScalarT BoolT (Binary Eq (Var BoolS "_v") (BoolLit False)))),("true",Monotype (ScalarT BoolT (Binary Eq (Var BoolS "_v") (BoolLit True))))])
("env",FunctionT "xs" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (FunctionT "ys" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "xs"]) (Pred IntS "len" [Var (DataS "List" [VarS "a"]) "ys"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "List" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Nil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "Cons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "len", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
compare :: xs:List a -> ys:List a -> {Bool|_v == (len xs == len ys)}
compare = \xs . \ys . 
    match xs with
      Nil -> 
        match ys with
          Nil -> true
          Cons x3 x4 -> false
      Cons x7 x8 -> 
        match ys with
          Nil -> false
          Cons x11 x12 -> compare x8 x12

(Goals: 2)
(Measures: 1)
(Spec size: 10)
(Solution size: 27)
Synplexity/BinarySearch
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [IntLit 0,Var (VarS "a") "_v"])) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] [Pred BoolS "p" [Binary Plus (Var IntS "_0") (IntLit 1),Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"])))))))),("INil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" [])))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Pair",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (FunctionT "z" (ScalarT (TypeVarT (fromList []) "c") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b",VarS "c"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b",VarS "c"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y",Var (VarS "c") "z"])))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("binarySearch",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]))))))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("fst",ForallT "a" (ForallT "b" (ForallT "c" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("split",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Le (Ite (Binary Ge (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1)),ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True),ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "ilen" [Pred (DataS "IList" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]]) (Pred IntS "ilen" [Pred (DataS "IList" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1))) (Binary Eq (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Pred (DataS "IList" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "ielems" [Pred (DataS "IList" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (SetLit (VarS "a") [Pred (VarS "a") "thd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"])))))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [IntLit 0,Var (VarS "a") "_v"])) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] [Pred BoolS "p" [Binary Plus (Var IntS "_0") (IntLit 1),Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"])))))))),("INil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" [])))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Pair",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (FunctionT "z" (ScalarT (TypeVarT (fromList []) "c") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b",VarS "c"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b",VarS "c"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y",Var (VarS "c") "z"])))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("binarySearch",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]))))))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("fst",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("snd",ForallT "a" (ForallT "b" (ForallT "c" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))),("split",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Le (Ite (Binary Ge (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1)),ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True),ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "ilen" [Pred (DataS "IList" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]]) (Pred IntS "ilen" [Pred (DataS "IList" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1))) (Binary Eq (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Pred (DataS "IList" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "ielems" [Pred (DataS "IList" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (SetLit (VarS "a") [Pred (VarS "a") "thd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"])))))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [IntLit 0,Var (VarS "a") "_v"])) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] [Pred BoolS "p" [Binary Plus (Var IntS "_0") (IntLit 1),Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"])))))))),("INil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" [])))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Pair",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (FunctionT "z" (ScalarT (TypeVarT (fromList []) "c") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b",VarS "c"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b",VarS "c"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y",Var (VarS "c") "z"])))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("binarySearch",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]))))))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("fst",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("snd",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))),("split",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Le (Ite (Binary Ge (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1)),ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True),ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "ilen" [Pred (DataS "IList" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]]) (Pred IntS "ilen" [Pred (DataS "IList" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1))) (Binary Eq (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Pred (DataS "IList" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "ielems" [Pred (DataS "IList" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (SetLit (VarS "a") [Pred (VarS "a") "thd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"])))))))),("thd",ForallT "a" (ForallT "b" (ForallT "c" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "c") (BoolLit True))))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [IntLit 0,Var (VarS "a") "_v"])) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] [Pred BoolS "p" [Binary Plus (Var IntS "_0") (IntLit 1),Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"])))))))),("INil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" [])))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Pair",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (FunctionT "z" (ScalarT (TypeVarT (fromList []) "c") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b",VarS "c"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b",VarS "c"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y",Var (VarS "c") "z"])))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("binarySearch",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]))))))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("fst",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True))))))),("ilen",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("snd",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))),("split",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Le (Ite (Binary Ge (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1)),ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True),ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "ilen" [Pred (DataS "IList" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]]) (Pred IntS "ilen" [Pred (DataS "IList" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1))) (Binary Eq (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Pred (DataS "IList" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "ielems" [Pred (DataS "IList" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (SetLit (VarS "a") [Pred (VarS "a") "thd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"])))))))),("thd",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "c") (BoolLit True))))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [IntLit 0,Var (VarS "a") "_v"])) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] [Pred BoolS "p" [Binary Plus (Var IntS "_0") (IntLit 1),Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"])))))))),("INil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" [])))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Pair",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (FunctionT "z" (ScalarT (TypeVarT (fromList []) "c") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b",VarS "c"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b",VarS "c"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y",Var (VarS "c") "z"])))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("binarySearch",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]))))))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("fst",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True))))))),("ielems",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)))))),("ilen",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))))))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("snd",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True))))))),("split",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Le (Ite (Binary Ge (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1)),ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True),ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "ilen" [Pred (DataS "IList" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]]) (Pred IntS "ilen" [Pred (DataS "IList" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1))) (Binary Eq (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Pred (DataS "IList" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "ielems" [Pred (DataS "IList" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (SetLit (VarS "a") [Pred (VarS "a") "thd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"])))))))),("thd",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "c") (BoolLit True))))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("ICons",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (Pred BoolS "p" [IntLit 0,Var (VarS "a") "_v"])) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "_v"))] [Pred BoolS "p" [Binary Plus (Var IntS "_0") (IntLit 1),Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "ICons" [Var (VarS "a") "x",Var (DataS "IList" [VarS "a"]) "xs"])))))))),("INil",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Eq (Var (DataS "IList" [VarS "a"]) "_v") (Cons (DataS "IList" [VarS "a"]) "INil" [])))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Pair",ForallT "c" (ForallT "b" (ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)) (FunctionT "z" (ScalarT (TypeVarT (fromList []) "c") (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (Binary Eq (Var (DataS "Pair" [VarS "a",VarS "b",VarS "c"]) "_v") (Cons (DataS "Pair" [VarS "a",VarS "b",VarS "c"]) "Pair" [Var (VarS "a") "x",Var (VarS "b") "y",Var (VarS "c") "z"])))))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("binarySearch",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "x0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary And (Binary Ge (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 0)) (Binary Or (Binary Eq (Binary Times (IntLit 2) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"])) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"])) (Binary Eq (Binary Times (IntLit 2) (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"])) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)))))) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "x0"]))))))))),("false",Monotype (ScalarT BoolT (Unary Not (Var BoolS "_v")))),("leq",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "y" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Le (Var (VarS "a") "x") (Var (VarS "a") "y")))))))),("split",ForallT "a" (ForallP (PredSig {predSigName = "p", predSigArgSorts = [IntS,VarS "a"], predSigResSort = BoolS}) (Monotype (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "Pair" [ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (Binary Le (Ite (Binary Ge (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))) (IntLit 0)) (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))) (Unary Neg (Binary Minus (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1)) (Binary Times (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "_v"]) (IntLit 2))))) (IntLit 1)),ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True),ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary And (Binary Eq (Binary Plus (Pred IntS "ilen" [Pred (DataS "IList" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]]) (Pred IntS "ilen" [Pred (DataS "IList" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (Binary Minus (Pred IntS "ilen" [Var (DataS "IList" [VarS "a"]) "xs"]) (IntLit 1))) (Binary Eq (Binary Union (Binary Union (Pred (SetS (VarS "a")) "ielems" [Pred (DataS "IList" [VarS "a"]) "fst" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]]) (Pred (SetS (VarS "a")) "ielems" [Pred (DataS "IList" [VarS "a"]) "snd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (SetLit (VarS "a") [Pred (VarS "a") "thd" [Var (DataS "Pair" [DataS "IList" [VarS "a"],DataS "IList" [VarS "a"],VarS "a"]) "_v"]])) (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"])))))))),("true",Monotype (ScalarT BoolT (Var BoolS "_v")))])
("env",FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Member (Var (VarS "a") "x") (Pred (SetS (VarS "a")) "ielems" [Var (DataS "IList" [VarS "a"]) "xs"]))))),Program {content = PHole, typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["x","y","z"], expr = Program {content = PSymbol "x", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "b") (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["x","y","z"], expr = Program {content = PSymbol "y", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "Pair" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True),ScalarT (TypeVarT (fromList []) "b") (BoolLit True),ScalarT (TypeVarT (fromList []) "c") (BoolLit True)] []) (BoolLit True)) (ScalarT (TypeVarT (fromList []) "c") (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "Pair", argNames = ["x","y","z"], expr = Program {content = PSymbol "z", typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "0", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PSymbol "1", typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ilen", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
("env",FunctionT "arg0" (ScalarT (DatatypeT "IList" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] [Pred BoolS "p" [Var IntS "_0",Var (VarS "a") "_1"]]) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)),Program {content = PFun "arg0" (Program {content = PMatch (Program {content = PSymbol "arg0", typeOf = AnyT}) [Case {constructor = "INil", argNames = [], expr = Program {content = PSymbol "Emptyset", typeOf = AnyT}},Case {constructor = "ICons", argNames = ["x","xs"], expr = Program {content = PApp (Program {content = PApp (Program {content = PSymbol "+", typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "Singleton", typeOf = AnyT}) (Program {content = PSymbol "x", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}) (Program {content = PApp (Program {content = PSymbol "ielems", typeOf = AnyT}) (Program {content = PSymbol "xs", typeOf = AnyT}), typeOf = AnyT}), typeOf = AnyT}}], typeOf = AnyT}), typeOf = AnyT})
binarySearch :: <p :: Int -> a -> Bool> . x:a -> xs:IList a <p> -> {Bool|_v == (x in ielems xs)}
binarySearch = \x . \xs . 
    match xs with
      INil -> false
      ICons x3 x4 -> leq (split x4)
                       (split INil)

(Goals: 6)
(Measures: 5)
(Spec size: 12)
(Solution size: 50)
Synplexity/nTimesM_log
("env",fromList [("Emptyset",ForallT "a" (Monotype (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Emptyset" []))))),("Insert",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (FunctionT "xs" (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Insert" [Var (VarS "a") "x",Var (DataS "DSet" [VarS "a"]) "xs"]))))))),("Singleton",ForallT "a" (Monotype (FunctionT "x" (ScalarT (TypeVarT (fromList []) "a") (BoolLit True)) (ScalarT (DatatypeT "DSet" [ScalarT (TypeVarT (fromList []) "a") (BoolLit True)] []) (Binary Eq (Var (DataS "DSet" [VarS "a"]) "_v") (Cons (DataS "DSet" [VarS "a"]) "Singleton" [Var (VarS "a") "x"])))))),("dec",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Minus (Var IntS "x") (IntLit 1)))))),("div2",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Div (Var IntS "x") (IntLit 2)))))),("double",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (Var IntS "x")))))),("eqz",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Var IntS "x") (IntLit 0)))))),("even",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (ScalarT BoolT (Binary Eq (Var BoolS "_v") (Binary Eq (Binary Mod (Var IntS "x") (IntLit 2)) (IntLit 0)))))),("nTimesM",Monotype (FunctionT "x0" (ScalarT IntT (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary And (Binary Ge (Var IntS "_v") (IntLit 0)) (Binary Le (Var IntS "_v") (Binary Plus (Binary Div (Var IntS "n") (IntLit 2)) (IntLit 1)))))) (FunctionT "m" (ScalarT IntT (Binary Gt (Var IntS "_v") (IntLit 0))) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Times (Var IntS "m") (Var IntS "x0"))))))),("plus",Monotype (FunctionT "x" (ScalarT IntT (BoolLit True)) (FunctionT "y" (ScalarT IntT (BoolLit True)) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Plus (Var IntS "x") (Var IntS "y")))))))])
("env",FunctionT "n" (ScalarT IntT (Binary Ge (Var IntS "_v") (IntLit 0))) (FunctionT "m" (ScalarT IntT (Binary Gt (Var IntS "_v") (IntLit 0))) (ScalarT IntT (Binary Eq (Var IntS "_v") (Binary Times (Var IntS "m") (Var IntS "n"))))),Program {content = PHole, typeOf = AnyT})
nTimesM :: n:{Int|_v >= 0} -> m:{Int|_v > 0} -> {Int|_v == m * n}
nTimesM = \n . \m . 
    if (n % 2) == 0
      then nTimesM (div2 n) (double m)
      else plus m (nTimesM (div2 n)
                     (double m))

(Goals: 1)
(Measures: 0)
(Spec size: 11)
(Solution size: 34)
