data Nat where
	Zero :: Nat
	Succ :: Nat -> Nat

termination measure val :: Nat -> {Int | _v >= 0} where
  Zero -> 0
  Succ x -> 1 + val x


zero :: {Int | _v == 0}
div2 :: x: Nat -> {Nat | 2 * (val _v) == (val x) || 2 * (val _v) == (val x) - 1}
even :: x: Nat -> {Bool | _v == ((val x) % 2 == 0)}
incTwo :: x: Int -> {Int | _v ==  x + 1}
double :: x: Int -> {Int | _v ==  x + x}

exp_two |*| (0,1,0) :: n: Nat -> {Int | _v ==val n}

exp_two = ??
