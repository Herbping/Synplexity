data Nat where
	Zero :: Nat
	Succ :: Nat -> Nat

termination measure val :: Nat -> {Int | _v >= 0} where
  Zero -> 0
  Succ x -> 1 + val x


zero :: {Int | _v == 0}
two :: {Int | _v == 2}
incTwo :: x: Nat -> {Int | _v == val x + 2}
double :: x: Nat -> {Int | _v == val x * val x}
one :: {Int | _v == 1}
leq :: x: Int -> y: Int -> {Bool | _v == (x <= y)}
plus  :: x: Int -> y: Int -> {Int | _v == (x + y)}

exp_two |*| (0,1,0) :: n: Nat -> {Int | _v == 2 * val n}

exp_two = ??
