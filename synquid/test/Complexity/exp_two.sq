data Nat where
	Zero :: Nat
	S :: x: Nat -> Nat

zero :: {Int | _v == 0}
two :: {Int | _v == 2}
neg :: x: Int -> {Int | _v == -x}
leq :: x: Int -> y: Int -> {Bool | _v == (x <= y)}
plus :: x: Int -> y: Int -> {Int | _v == (x + y)}
mult :: x: Int -> y: Int -> {Int | _v == (x * y)}
neq :: x: Int -> y: Int -> {Bool | _v == (x != y)}


exp_two :: n: Int -> {Int | (!(2 == n)||(_v == 4)) && (!(3 == n)||(_v == 8)) && (!(4 == n)||(_v == 16)) && (!(1 == n)||(_v == 2)) && (!(0 == n)||(_v == 1))} |*| (0,1,0)
exp_two = ??
