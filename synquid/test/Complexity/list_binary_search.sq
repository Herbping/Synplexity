leq :: x: a -> y: a -> {Bool | _v == (x <= y)}
true :: {Bool | _v}
false :: {Bool | !_v}
zero :: {Int | _v == 0}

dec :: x: Int -> {Int | _v == x - 1}

data IList a <p :: Int -> a -> Bool> where
	INil :: IList a <p>
	ICons :: x: {a | p 0 _v} -> xs: IList {a | x <= _v} <{p (_0 + 1) _1}> -> IList a <p>

termination measure ilen :: IList a -> {Int | _v >= 0} where
  INil -> 0
  ICons x xs -> 1 + ilen xs

measure ielems :: IList a -> Set a where
  INil -> []
  ICons x xs -> [x] + ielems xs



ith :: <p :: Int -> a -> Bool> . xs: IList a <p> -> i: {Int | 0 <= _v && _v < ilen xs} -> {a | p i _v}
binarySearch :: <p :: Int -> a -> Bool> . x: a -> xs: IList a <p> -> min: Int ->  {Bool  | _v == (x in ielems xs)   }
binarySearch = ??
