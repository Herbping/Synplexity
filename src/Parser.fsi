// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | TUP
  | CTOR_ALONE
  | CTOR_ARG
  | P4
  | P3
  | P2
  | P1
  | OR
  | AND
  | SEMI
  | RBRACKET
  | LBRACKET
  | RPAREN
  | LPAREN
  | PIPE
  | STAR
  | COLON
  | COMMA
  | ARROW
  | EQUAL
  | REFINES
  | HOLE
  | WITH
  | NOT
  | UNIT
  | REC
  | LET
  | OF
  | TYPE
  | MATCH
  | FUN
  | TICK of (string)
  | PROJ of (int)
  | UID of (string)
  | LID of (string)
  | INT of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_TUP
    | TOKEN_CTOR_ALONE
    | TOKEN_CTOR_ARG
    | TOKEN_P4
    | TOKEN_P3
    | TOKEN_P2
    | TOKEN_P1
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_SEMI
    | TOKEN_RBRACKET
    | TOKEN_LBRACKET
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_PIPE
    | TOKEN_STAR
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_ARROW
    | TOKEN_EQUAL
    | TOKEN_REFINES
    | TOKEN_HOLE
    | TOKEN_WITH
    | TOKEN_NOT
    | TOKEN_UNIT
    | TOKEN_REC
    | TOKEN_LET
    | TOKEN_OF
    | TOKEN_TYPE
    | TOKEN_MATCH
    | TOKEN_FUN
    | TOKEN_TICK
    | TOKEN_PROJ
    | TOKEN_UID
    | TOKEN_LID
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_decls
    | NONTERM_type_ctor_one
    | NONTERM_type_ctor
    | NONTERM_tick_comma_one
    | NONTERM_tick_comma
    | NONTERM_arg
    | NONTERM_args_list_one
    | NONTERM_let_head
    | NONTERM_let_rec_head
    | NONTERM_refn
    | NONTERM_refn_comma_one
    | NONTERM_refn_comma
    | NONTERM_refn_semi
    | NONTERM_refn_semi2
    | NONTERM_typ
    | NONTERM_typ_in_tup
    | NONTERM_typ_base
    | NONTERM_typ_star_one
    | NONTERM_typ_star
    | NONTERM_typ_comma_one
    | NONTERM_typ_comma
    | NONTERM_expr
    | NONTERM_expr_p2
    | NONTERM_expr_p1
    | NONTERM_app_chain
    | NONTERM_ctor_chain
    | NONTERM_branches
    | NONTERM_branch
    | NONTERM_expr_comma_one
    | NONTERM_expr_comma
    | NONTERM_expr_semi
    | NONTERM_expr_semi2
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Synth.Lang.synth_problem) 
