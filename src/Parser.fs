// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 5 "src/Parser.fsy"

open Synth.Lang

let rec expr_of_int (n:int) : expr =
    if n = 0 then HC.ector("Z", HC.eunit) else HC.ector("S", expr_of_int (n-1))

let rec refn_of_int (n:int) : refn_ext =
    if n = 0 then RECtor("Z", REUnit) else RECtor("S", refn_of_int (n-1))

let rec expr_of_list (ls:expr list) : expr =
    match ls with
    | hd :: tl -> HC.ector("Cons", HC.etup[hd; expr_of_list tl])
    | []       -> HC.ector("Nil", HC.eunit)

let rec refn_of_list (ls:refn_ext list) : refn_ext =
    match ls with
    | hd :: tl -> RECtor("Cons", RETup[hd; refn_of_list tl])
    | []       -> RECtor("Nil", REUnit)

// Expression declaration.
let make_expr_decl (fix:bool) (name:id) (args:(id * typ) list) (t:typ) (e:expr) (comp:int list)=
    if args.Length = 0 then DLibrary(name, e)
    else
        let rec inner_funs args =
            match args with
            | (x,t)::tl -> HC.efun{argl=x; arg_type=t; body=inner_funs tl; complexity=[0;0;3]}
            | []        -> e
        let rec fix_typ ls =
            match ls with
            | (_, t'):: tl -> HC.tarr(t', fix_typ tl)
            | []           -> t

        let func = if fix then HC.efix {name=name; argf=fst args.Head; arg_type=snd args.Head;
                                        ret_type=fix_typ args.Tail; body=inner_funs args.Tail; complexity=comp}
                   else        HC.efun {argl=fst args.Head; arg_type=snd args.Head;
                                        body=inner_funs args.Tail; complexity=comp}        
        DLibrary(name, func)

// Append a declaration to a synth problem
let app_decl sp d = {sp with declarations = d :: sp.declarations }
let rev_decls sp  = {sp with declarations = List.rev sp.declarations }


# 50 "src/Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | TUP
  | CTOR_ALONE
  | CTOR_ARG
  | P4
  | P3
  | P2
  | P1
  | OR
  | AND
  | SEMI
  | RBRACKET
  | LBRACKET
  | RPAREN
  | LPAREN
  | PIPE
  | STAR
  | COLON
  | COMMA
  | ARROW
  | EQUAL
  | COMPLEXITY
  | REFINES
  | HOLE
  | WITH
  | INF
  | NOT
  | UNIT
  | REC
  | LET
  | OF
  | TYPE
  | MATCH
  | FUN
  | TICK of (string)
  | PROJ of (int)
  | UID of (string)
  | LID of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_TUP
    | TOKEN_CTOR_ALONE
    | TOKEN_CTOR_ARG
    | TOKEN_P4
    | TOKEN_P3
    | TOKEN_P2
    | TOKEN_P1
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_SEMI
    | TOKEN_RBRACKET
    | TOKEN_LBRACKET
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_PIPE
    | TOKEN_STAR
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_ARROW
    | TOKEN_EQUAL
    | TOKEN_COMPLEXITY
    | TOKEN_REFINES
    | TOKEN_HOLE
    | TOKEN_WITH
    | TOKEN_INF
    | TOKEN_NOT
    | TOKEN_UNIT
    | TOKEN_REC
    | TOKEN_LET
    | TOKEN_OF
    | TOKEN_TYPE
    | TOKEN_MATCH
    | TOKEN_FUN
    | TOKEN_TICK
    | TOKEN_PROJ
    | TOKEN_UID
    | TOKEN_LID
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_decls
    | NONTERM_type_ctor_one
    | NONTERM_type_ctor
    | NONTERM_tick_comma_one
    | NONTERM_tick_comma
    | NONTERM_arg
    | NONTERM_args_list_one
    | NONTERM_let_head
    | NONTERM_let_rec_head
    | NONTERM_refn
    | NONTERM_refn_comma_one
    | NONTERM_refn_comma
    | NONTERM_refn_semi
    | NONTERM_refn_semi2
    | NONTERM_typ
    | NONTERM_typ_in_tup
    | NONTERM_typ_base
    | NONTERM_typ_star_one
    | NONTERM_typ_star
    | NONTERM_typ_comma_one
    | NONTERM_typ_comma
    | NONTERM_expr
    | NONTERM_expr_p2
    | NONTERM_expr_p1
    | NONTERM_app_chain
    | NONTERM_ctor_chain
    | NONTERM_branches
    | NONTERM_branch
    | NONTERM_expr_comma_one
    | NONTERM_expr_comma
    | NONTERM_expr_semi
    | NONTERM_expr_semi2

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | TUP  -> 1 
  | CTOR_ALONE  -> 2 
  | CTOR_ARG  -> 3 
  | P4  -> 4 
  | P3  -> 5 
  | P2  -> 6 
  | P1  -> 7 
  | OR  -> 8 
  | AND  -> 9 
  | SEMI  -> 10 
  | RBRACKET  -> 11 
  | LBRACKET  -> 12 
  | RPAREN  -> 13 
  | LPAREN  -> 14 
  | PIPE  -> 15 
  | STAR  -> 16 
  | COLON  -> 17 
  | COMMA  -> 18 
  | ARROW  -> 19 
  | EQUAL  -> 20 
  | COMPLEXITY  -> 21 
  | REFINES  -> 22 
  | HOLE  -> 23 
  | WITH  -> 24 
  | INF  -> 25 
  | NOT  -> 26 
  | UNIT  -> 27 
  | REC  -> 28 
  | LET  -> 29 
  | OF  -> 30 
  | TYPE  -> 31 
  | MATCH  -> 32 
  | FUN  -> 33 
  | TICK _ -> 34 
  | PROJ _ -> 35 
  | UID _ -> 36 
  | LID _ -> 37 
  | INT _ -> 38 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_TUP 
  | 2 -> TOKEN_CTOR_ALONE 
  | 3 -> TOKEN_CTOR_ARG 
  | 4 -> TOKEN_P4 
  | 5 -> TOKEN_P3 
  | 6 -> TOKEN_P2 
  | 7 -> TOKEN_P1 
  | 8 -> TOKEN_OR 
  | 9 -> TOKEN_AND 
  | 10 -> TOKEN_SEMI 
  | 11 -> TOKEN_RBRACKET 
  | 12 -> TOKEN_LBRACKET 
  | 13 -> TOKEN_RPAREN 
  | 14 -> TOKEN_LPAREN 
  | 15 -> TOKEN_PIPE 
  | 16 -> TOKEN_STAR 
  | 17 -> TOKEN_COLON 
  | 18 -> TOKEN_COMMA 
  | 19 -> TOKEN_ARROW 
  | 20 -> TOKEN_EQUAL 
  | 21 -> TOKEN_COMPLEXITY 
  | 22 -> TOKEN_REFINES 
  | 23 -> TOKEN_HOLE 
  | 24 -> TOKEN_WITH 
  | 25 -> TOKEN_INF 
  | 26 -> TOKEN_NOT 
  | 27 -> TOKEN_UNIT 
  | 28 -> TOKEN_REC 
  | 29 -> TOKEN_LET 
  | 30 -> TOKEN_OF 
  | 31 -> TOKEN_TYPE 
  | 32 -> TOKEN_MATCH 
  | 33 -> TOKEN_FUN 
  | 34 -> TOKEN_TICK 
  | 35 -> TOKEN_PROJ 
  | 36 -> TOKEN_UID 
  | 37 -> TOKEN_LID 
  | 38 -> TOKEN_INT 
  | 41 -> TOKEN_end_of_input
  | 39 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_decls 
    | 3 -> NONTERM_decls 
    | 4 -> NONTERM_decls 
    | 5 -> NONTERM_decls 
    | 6 -> NONTERM_decls 
    | 7 -> NONTERM_decls 
    | 8 -> NONTERM_decls 
    | 9 -> NONTERM_decls 
    | 10 -> NONTERM_decls 
    | 11 -> NONTERM_decls 
    | 12 -> NONTERM_decls 
    | 13 -> NONTERM_decls 
    | 14 -> NONTERM_decls 
    | 15 -> NONTERM_type_ctor_one 
    | 16 -> NONTERM_type_ctor_one 
    | 17 -> NONTERM_type_ctor 
    | 18 -> NONTERM_type_ctor 
    | 19 -> NONTERM_tick_comma_one 
    | 20 -> NONTERM_tick_comma 
    | 21 -> NONTERM_tick_comma 
    | 22 -> NONTERM_arg 
    | 23 -> NONTERM_args_list_one 
    | 24 -> NONTERM_args_list_one 
    | 25 -> NONTERM_let_head 
    | 26 -> NONTERM_let_rec_head 
    | 27 -> NONTERM_refn 
    | 28 -> NONTERM_refn 
    | 29 -> NONTERM_refn 
    | 30 -> NONTERM_refn 
    | 31 -> NONTERM_refn 
    | 32 -> NONTERM_refn 
    | 33 -> NONTERM_refn 
    | 34 -> NONTERM_refn 
    | 35 -> NONTERM_refn 
    | 36 -> NONTERM_refn 
    | 37 -> NONTERM_refn 
    | 38 -> NONTERM_refn 
    | 39 -> NONTERM_refn 
    | 40 -> NONTERM_refn_comma_one 
    | 41 -> NONTERM_refn_comma 
    | 42 -> NONTERM_refn_comma 
    | 43 -> NONTERM_refn_semi 
    | 44 -> NONTERM_refn_semi 
    | 45 -> NONTERM_refn_semi2 
    | 46 -> NONTERM_refn_semi2 
    | 47 -> NONTERM_typ 
    | 48 -> NONTERM_typ 
    | 49 -> NONTERM_typ 
    | 50 -> NONTERM_typ 
    | 51 -> NONTERM_typ 
    | 52 -> NONTERM_typ 
    | 53 -> NONTERM_typ_in_tup 
    | 54 -> NONTERM_typ_in_tup 
    | 55 -> NONTERM_typ_in_tup 
    | 56 -> NONTERM_typ_in_tup 
    | 57 -> NONTERM_typ_base 
    | 58 -> NONTERM_typ_base 
    | 59 -> NONTERM_typ_base 
    | 60 -> NONTERM_typ_base 
    | 61 -> NONTERM_typ_base 
    | 62 -> NONTERM_typ_base 
    | 63 -> NONTERM_typ_star_one 
    | 64 -> NONTERM_typ_star 
    | 65 -> NONTERM_typ_star 
    | 66 -> NONTERM_typ_comma_one 
    | 67 -> NONTERM_typ_comma 
    | 68 -> NONTERM_typ_comma 
    | 69 -> NONTERM_expr 
    | 70 -> NONTERM_expr 
    | 71 -> NONTERM_expr 
    | 72 -> NONTERM_expr_p2 
    | 73 -> NONTERM_expr_p2 
    | 74 -> NONTERM_expr_p2 
    | 75 -> NONTERM_expr_p2 
    | 76 -> NONTERM_expr_p2 
    | 77 -> NONTERM_expr_p2 
    | 78 -> NONTERM_expr_p2 
    | 79 -> NONTERM_expr_p1 
    | 80 -> NONTERM_expr_p1 
    | 81 -> NONTERM_expr_p1 
    | 82 -> NONTERM_expr_p1 
    | 83 -> NONTERM_expr_p1 
    | 84 -> NONTERM_app_chain 
    | 85 -> NONTERM_app_chain 
    | 86 -> NONTERM_ctor_chain 
    | 87 -> NONTERM_ctor_chain 
    | 88 -> NONTERM_ctor_chain 
    | 89 -> NONTERM_branches 
    | 90 -> NONTERM_branches 
    | 91 -> NONTERM_branch 
    | 92 -> NONTERM_expr_comma_one 
    | 93 -> NONTERM_expr_comma 
    | 94 -> NONTERM_expr_comma 
    | 95 -> NONTERM_expr_semi 
    | 96 -> NONTERM_expr_semi2 
    | 97 -> NONTERM_expr_semi2 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 41 
let _fsyacc_tagOfErrorTerminal = 39

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | TUP  -> "TUP" 
  | CTOR_ALONE  -> "CTOR_ALONE" 
  | CTOR_ARG  -> "CTOR_ARG" 
  | P4  -> "P4" 
  | P3  -> "P3" 
  | P2  -> "P2" 
  | P1  -> "P1" 
  | OR  -> "OR" 
  | AND  -> "AND" 
  | SEMI  -> "SEMI" 
  | RBRACKET  -> "RBRACKET" 
  | LBRACKET  -> "LBRACKET" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | PIPE  -> "PIPE" 
  | STAR  -> "STAR" 
  | COLON  -> "COLON" 
  | COMMA  -> "COMMA" 
  | ARROW  -> "ARROW" 
  | EQUAL  -> "EQUAL" 
  | COMPLEXITY  -> "COMPLEXITY" 
  | REFINES  -> "REFINES" 
  | HOLE  -> "HOLE" 
  | WITH  -> "WITH" 
  | INF  -> "INF" 
  | NOT  -> "NOT" 
  | UNIT  -> "UNIT" 
  | REC  -> "REC" 
  | LET  -> "LET" 
  | OF  -> "OF" 
  | TYPE  -> "TYPE" 
  | MATCH  -> "MATCH" 
  | FUN  -> "FUN" 
  | TICK _ -> "TICK" 
  | PROJ _ -> "PROJ" 
  | UID _ -> "UID" 
  | LID _ -> "LID" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | TUP  -> (null : System.Object) 
  | CTOR_ALONE  -> (null : System.Object) 
  | CTOR_ARG  -> (null : System.Object) 
  | P4  -> (null : System.Object) 
  | P3  -> (null : System.Object) 
  | P2  -> (null : System.Object) 
  | P1  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | PIPE  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | COMPLEXITY  -> (null : System.Object) 
  | REFINES  -> (null : System.Object) 
  | HOLE  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | INF  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | UNIT  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | MATCH  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | TICK _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PROJ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 9us; 65535us; 0us; 2us; 6us; 7us; 11us; 12us; 18us; 19us; 28us; 29us; 41us; 42us; 50us; 51us; 63us; 64us; 89us; 90us; 3us; 65535us; 5us; 6us; 10us; 11us; 17us; 18us; 6us; 65535us; 5us; 96us; 6us; 97us; 10us; 96us; 11us; 97us; 17us; 96us; 18us; 97us; 1us; 65535us; 13us; 14us; 1us; 65535us; 13us; 102us; 5us; 65535us; 21us; 111us; 22us; 112us; 43us; 111us; 44us; 112us; 204us; 205us; 2us; 65535us; 21us; 22us; 43us; 44us; 9us; 65535us; 0us; 85us; 6us; 85us; 11us; 85us; 18us; 85us; 28us; 85us; 41us; 85us; 50us; 85us; 63us; 85us; 89us; 85us; 9us; 65535us; 0us; 43us; 6us; 43us; 11us; 43us; 18us; 43us; 28us; 43us; 41us; 43us; 50us; 43us; 63us; 43us; 89us; 43us; 13us; 65535us; 75us; 76us; 79us; 80us; 91us; 92us; 118us; 139us; 122us; 123us; 126us; 137us; 130us; 137us; 141us; 133us; 142us; 134us; 147us; 135us; 151us; 136us; 152us; 138us; 154us; 140us; 1us; 65535us; 142us; 145us; 3us; 65535us; 126us; 127us; 130us; 131us; 142us; 150us; 1us; 65535us; 118us; 119us; 1us; 65535us; 118us; 153us; 10us; 65535us; 23us; 24us; 45us; 46us; 65us; 66us; 100us; 101us; 108us; 109us; 113us; 114us; 160us; 156us; 164us; 157us; 169us; 158us; 184us; 159us; 11us; 65535us; 23us; 182us; 45us; 182us; 65us; 182us; 100us; 182us; 108us; 182us; 113us; 182us; 160us; 182us; 164us; 182us; 169us; 182us; 180us; 181us; 184us; 182us; 11us; 65535us; 23us; 161us; 45us; 161us; 65us; 161us; 100us; 161us; 108us; 161us; 113us; 161us; 160us; 161us; 164us; 161us; 169us; 161us; 180us; 168us; 184us; 161us; 10us; 65535us; 23us; 163us; 45us; 163us; 65us; 163us; 100us; 163us; 108us; 163us; 113us; 163us; 160us; 163us; 164us; 163us; 169us; 163us; 184us; 163us; 10us; 65535us; 23us; 179us; 45us; 179us; 65us; 179us; 100us; 179us; 108us; 179us; 113us; 179us; 160us; 179us; 164us; 179us; 169us; 179us; 184us; 179us; 2us; 65535us; 164us; 176us; 169us; 176us; 2us; 65535us; 164us; 183us; 169us; 183us; 12us; 65535us; 25us; 26us; 38us; 39us; 47us; 48us; 60us; 61us; 86us; 87us; 188us; 193us; 196us; 227us; 206us; 207us; 208us; 209us; 221us; 222us; 224us; 225us; 228us; 229us; 17us; 65535us; 25us; 186us; 38us; 186us; 47us; 186us; 60us; 186us; 86us; 186us; 186us; 212us; 187us; 215us; 188us; 186us; 196us; 186us; 200us; 201us; 203us; 213us; 206us; 186us; 208us; 186us; 214us; 215us; 221us; 186us; 224us; 186us; 228us; 186us; 12us; 65535us; 25us; 185us; 38us; 185us; 47us; 185us; 60us; 185us; 86us; 185us; 188us; 185us; 196us; 185us; 206us; 185us; 208us; 185us; 221us; 185us; 224us; 185us; 228us; 185us; 12us; 65535us; 25us; 203us; 38us; 203us; 47us; 203us; 60us; 203us; 86us; 203us; 188us; 203us; 196us; 203us; 206us; 203us; 208us; 203us; 221us; 203us; 224us; 203us; 228us; 203us; 14us; 65535us; 25us; 202us; 38us; 202us; 47us; 202us; 60us; 202us; 86us; 202us; 187us; 216us; 188us; 202us; 196us; 202us; 206us; 202us; 208us; 202us; 214us; 216us; 221us; 202us; 224us; 202us; 228us; 202us; 1us; 65535us; 210us; 211us; 1us; 65535us; 211us; 217us; 1us; 65535us; 188us; 191us; 1us; 65535us; 188us; 223us; 1us; 65535us; 196us; 198us; 1us; 65535us; 196us; 226us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 13us; 17us; 24us; 26us; 28us; 34us; 37us; 47us; 57us; 71us; 73us; 77us; 79us; 81us; 92us; 104us; 116us; 127us; 138us; 141us; 144us; 157us; 175us; 188us; 201us; 216us; 218us; 220us; 222us; 224us; 226us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 3us; 2us; 3us; 4us; 1us; 2us; 1us; 2us; 2us; 2us; 16us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 3us; 2us; 3us; 16us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 2us; 4us; 16us; 1us; 4us; 4us; 5us; 6us; 25us; 26us; 3us; 5us; 6us; 25us; 3us; 5us; 6us; 24us; 2us; 5us; 6us; 3us; 5us; 6us; 48us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 5us; 7us; 8us; 9us; 10us; 11us; 3us; 7us; 8us; 24us; 2us; 7us; 8us; 3us; 7us; 8us; 48us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 3us; 9us; 10us; 11us; 4us; 9us; 10us; 11us; 48us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 2us; 9us; 32us; 1us; 9us; 1us; 9us; 1us; 10us; 2us; 10us; 32us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 3us; 12us; 13us; 14us; 2us; 12us; 14us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 2us; 13us; 32us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 2us; 17us; 18us; 2us; 17us; 18us; 1us; 17us; 2us; 17us; 48us; 2us; 19us; 21us; 2us; 19us; 21us; 2us; 19us; 21us; 1us; 20us; 1us; 22us; 1us; 22us; 1us; 22us; 2us; 22us; 48us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 2us; 25us; 48us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 2us; 29us; 32us; 1us; 29us; 1us; 30us; 1us; 30us; 2us; 30us; 42us; 1us; 30us; 1us; 31us; 1us; 31us; 2us; 31us; 42us; 1us; 31us; 2us; 32us; 32us; 3us; 32us; 34us; 41us; 2us; 32us; 36us; 3us; 32us; 40us; 42us; 2us; 32us; 41us; 2us; 32us; 42us; 2us; 32us; 45us; 2us; 32us; 46us; 1us; 32us; 3us; 33us; 34us; 35us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 35us; 2us; 36us; 37us; 1us; 38us; 1us; 39us; 2us; 40us; 42us; 2us; 40us; 42us; 1us; 42us; 2us; 43us; 46us; 1us; 46us; 3us; 47us; 53us; 59us; 2us; 48us; 48us; 5us; 48us; 52us; 56us; 61us; 67us; 4us; 48us; 56us; 61us; 67us; 3us; 48us; 66us; 68us; 1us; 48us; 2us; 49us; 55us; 3us; 50us; 54us; 60us; 1us; 51us; 4us; 52us; 56us; 61us; 62us; 3us; 52us; 56us; 61us; 2us; 53us; 59us; 2us; 54us; 60us; 1us; 55us; 3us; 56us; 61us; 62us; 2us; 56us; 61us; 2us; 57us; 58us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 62us; 1us; 62us; 2us; 63us; 65us; 2us; 63us; 65us; 2us; 63us; 65us; 1us; 64us; 2us; 66us; 68us; 2us; 66us; 68us; 1us; 69us; 2us; 70us; 84us; 4us; 71us; 86us; 87us; 88us; 3us; 72us; 74us; 75us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 74us; 2us; 75us; 93us; 1us; 75us; 1us; 76us; 2us; 77us; 78us; 1us; 77us; 1us; 78us; 1us; 78us; 1us; 79us; 1us; 79us; 1us; 80us; 2us; 81us; 85us; 1us; 82us; 1us; 82us; 1us; 82us; 1us; 82us; 1us; 83us; 1us; 83us; 1us; 83us; 2us; 83us; 89us; 1us; 84us; 1us; 85us; 4us; 86us; 86us; 87us; 88us; 1us; 87us; 1us; 88us; 1us; 89us; 1us; 91us; 1us; 91us; 1us; 91us; 1us; 91us; 1us; 91us; 2us; 92us; 94us; 2us; 92us; 94us; 2us; 92us; 94us; 2us; 95us; 97us; 1us; 96us; 1us; 97us; 1us; 97us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 10us; 12us; 14us; 17us; 19us; 21us; 23us; 25us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 43us; 45us; 50us; 54us; 58us; 61us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 107us; 111us; 114us; 118us; 120us; 122us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; 140us; 142us; 144us; 146us; 148us; 150us; 152us; 154us; 158us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 177us; 179us; 181us; 184us; 186us; 188us; 190us; 193us; 195us; 197us; 199us; 201us; 205us; 208us; 210us; 212us; 214us; 216us; 218us; 221us; 223us; 225us; 227us; 229us; 231us; 234us; 237us; 239us; 242us; 245us; 248us; 251us; 253us; 255us; 257us; 259us; 262us; 264us; 266us; 268us; 270us; 273us; 275us; 277us; 279us; 281us; 283us; 285us; 287us; 289us; 292us; 294us; 296us; 298us; 301us; 303us; 305us; 307us; 310us; 312us; 315us; 319us; 322us; 326us; 329us; 332us; 335us; 338us; 340us; 344us; 346us; 348us; 350us; 352us; 355us; 357us; 359us; 362us; 365us; 367us; 370us; 372us; 376us; 379us; 385us; 390us; 394us; 396us; 399us; 403us; 405us; 410us; 414us; 417us; 420us; 422us; 426us; 429us; 432us; 434us; 436us; 438us; 440us; 442us; 444us; 446us; 449us; 452us; 455us; 457us; 460us; 463us; 465us; 468us; 473us; 477us; 479us; 481us; 483us; 485us; 488us; 490us; 492us; 495us; 497us; 499us; 501us; 503us; 505us; 507us; 510us; 512us; 514us; 516us; 518us; 520us; 522us; 524us; 527us; 529us; 531us; 536us; 538us; 540us; 542us; 544us; 546us; 548us; 550us; 552us; 555us; 558us; 561us; 564us; 566us; 568us; |]
let _fsyacc_action_rows = 230
let _fsyacc_actionTableElements = [|2us; 32768us; 29us; 20us; 31us; 3us; 0us; 49152us; 0us; 16385us; 3us; 32768us; 14us; 13us; 34us; 8us; 37us; 4us; 1us; 32768us; 20us; 5us; 1us; 32768us; 15us; 98us; 3us; 32768us; 15us; 98us; 29us; 20us; 31us; 3us; 0us; 16386us; 1us; 32768us; 37us; 9us; 1us; 32768us; 20us; 10us; 1us; 32768us; 15us; 98us; 3us; 32768us; 15us; 98us; 29us; 20us; 31us; 3us; 0us; 16387us; 1us; 32768us; 34us; 105us; 1us; 32768us; 13us; 15us; 1us; 32768us; 37us; 16us; 1us; 32768us; 20us; 17us; 1us; 32768us; 15us; 98us; 3us; 32768us; 15us; 98us; 29us; 20us; 31us; 3us; 0us; 16388us; 2us; 32768us; 28us; 115us; 37us; 21us; 2us; 32768us; 14us; 106us; 17us; 113us; 2us; 32768us; 14us; 106us; 17us; 23us; 4us; 32768us; 14us; 164us; 27us; 155us; 34us; 162us; 37us; 171us; 3us; 32768us; 19us; 160us; 20us; 25us; 21us; 30us; 8us; 32768us; 12us; 196us; 14us; 188us; 32us; 208us; 33us; 204us; 35us; 200us; 36us; 187us; 37us; 190us; 38us; 195us; 1us; 32768us; 10us; 27us; 1us; 32768us; 10us; 28us; 2us; 32768us; 29us; 20us; 31us; 3us; 0us; 16389us; 1us; 32768us; 14us; 31us; 1us; 32768us; 38us; 32us; 1us; 32768us; 18us; 33us; 1us; 32768us; 38us; 34us; 1us; 32768us; 18us; 35us; 1us; 32768us; 38us; 36us; 1us; 32768us; 13us; 37us; 1us; 32768us; 20us; 38us; 8us; 32768us; 12us; 196us; 14us; 188us; 32us; 208us; 33us; 204us; 35us; 200us; 36us; 187us; 37us; 190us; 38us; 195us; 1us; 32768us; 10us; 40us; 1us; 32768us; 10us; 41us; 2us; 32768us; 29us; 20us; 31us; 3us; 0us; 16390us; 2us; 32768us; 14us; 106us; 17us; 65us; 2us; 32768us; 14us; 106us; 17us; 45us; 4us; 32768us; 14us; 164us; 27us; 155us; 34us; 162us; 37us; 171us; 3us; 32768us; 19us; 160us; 20us; 47us; 21us; 52us; 8us; 32768us; 12us; 196us; 14us; 188us; 32us; 208us; 33us; 204us; 35us; 200us; 36us; 187us; 37us; 190us; 38us; 195us; 1us; 32768us; 10us; 49us; 1us; 32768us; 10us; 50us; 2us; 32768us; 29us; 20us; 31us; 3us; 0us; 16391us; 1us; 32768us; 14us; 53us; 1us; 32768us; 38us; 54us; 1us; 32768us; 18us; 55us; 1us; 32768us; 38us; 56us; 1us; 32768us; 18us; 57us; 1us; 32768us; 38us; 58us; 1us; 32768us; 13us; 59us; 1us; 32768us; 20us; 60us; 8us; 32768us; 12us; 196us; 14us; 188us; 32us; 208us; 33us; 204us; 35us; 200us; 36us; 187us; 37us; 190us; 38us; 195us; 1us; 32768us; 10us; 62us; 1us; 32768us; 10us; 63us; 2us; 32768us; 29us; 20us; 31us; 3us; 0us; 16392us; 4us; 32768us; 14us; 164us; 27us; 155us; 34us; 162us; 37us; 171us; 4us; 32768us; 19us; 160us; 20us; 83us; 21us; 67us; 22us; 79us; 1us; 32768us; 14us; 68us; 1us; 32768us; 38us; 69us; 1us; 32768us; 18us; 70us; 1us; 32768us; 38us; 71us; 1us; 32768us; 18us; 72us; 1us; 32768us; 38us; 73us; 1us; 32768us; 13us; 74us; 1us; 32768us; 22us; 75us; 9us; 32768us; 8us; 129us; 9us; 125us; 12us; 118us; 14us; 142us; 26us; 121us; 34us; 149us; 36us; 147us; 37us; 148us; 38us; 117us; 2us; 32768us; 19us; 141us; 20us; 77us; 1us; 32768us; 23us; 78us; 0us; 16393us; 9us; 32768us; 8us; 129us; 9us; 125us; 12us; 118us; 14us; 142us; 26us; 121us; 34us; 149us; 36us; 147us; 37us; 148us; 38us; 117us; 2us; 32768us; 19us; 141us; 20us; 81us; 1us; 32768us; 23us; 82us; 0us; 16394us; 1us; 32768us; 23us; 84us; 0us; 16395us; 2us; 32768us; 20us; 86us; 22us; 91us; 9us; 32768us; 12us; 196us; 14us; 188us; 23us; 95us; 32us; 208us; 33us; 204us; 35us; 200us; 36us; 187us; 37us; 190us; 38us; 195us; 1us; 32768us; 10us; 88us; 1us; 32768us; 10us; 89us; 2us; 32768us; 29us; 20us; 31us; 3us; 0us; 16396us; 9us; 32768us; 8us; 129us; 9us; 125us; 12us; 118us; 14us; 142us; 26us; 121us; 34us; 149us; 36us; 147us; 37us; 148us; 38us; 117us; 2us; 32768us; 19us; 141us; 20us; 93us; 1us; 32768us; 23us; 94us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 1us; 32768us; 36us; 99us; 1us; 16402us; 30us; 100us; 4us; 32768us; 14us; 164us; 27us; 155us; 34us; 162us; 37us; 171us; 1us; 16401us; 19us; 160us; 1us; 32768us; 18us; 103us; 1us; 32768us; 34us; 104us; 1us; 16403us; 18us; 16405us; 0us; 16404us; 1us; 32768us; 37us; 107us; 1us; 32768us; 17us; 108us; 4us; 32768us; 14us; 164us; 27us; 155us; 34us; 162us; 37us; 171us; 2us; 32768us; 13us; 110us; 19us; 160us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 4us; 32768us; 14us; 164us; 27us; 155us; 34us; 162us; 37us; 171us; 1us; 16409us; 19us; 160us; 1us; 32768us; 37us; 116us; 0us; 16410us; 0us; 16411us; 9us; 16428us; 8us; 129us; 9us; 125us; 12us; 118us; 14us; 142us; 26us; 121us; 34us; 149us; 36us; 147us; 37us; 148us; 38us; 117us; 1us; 32768us; 11us; 120us; 0us; 16412us; 1us; 32768us; 14us; 122us; 9us; 32768us; 8us; 129us; 9us; 125us; 12us; 118us; 14us; 142us; 26us; 121us; 34us; 149us; 36us; 147us; 37us; 148us; 38us; 117us; 2us; 32768us; 13us; 124us; 19us; 141us; 0us; 16413us; 1us; 32768us; 14us; 126us; 9us; 32768us; 8us; 129us; 9us; 125us; 12us; 118us; 14us; 142us; 26us; 121us; 34us; 149us; 36us; 147us; 37us; 148us; 38us; 117us; 2us; 32768us; 13us; 128us; 18us; 152us; 0us; 16414us; 1us; 32768us; 14us; 130us; 9us; 32768us; 8us; 129us; 9us; 125us; 12us; 118us; 14us; 142us; 26us; 121us; 34us; 149us; 36us; 147us; 37us; 148us; 38us; 117us; 2us; 32768us; 13us; 132us; 18us; 152us; 0us; 16415us; 1us; 16416us; 19us; 141us; 2us; 16425us; 13us; 144us; 19us; 141us; 0us; 16420us; 2us; 16424us; 18us; 16426us; 19us; 141us; 1us; 16425us; 19us; 141us; 1us; 16426us; 19us; 141us; 1us; 16429us; 19us; 141us; 1us; 16430us; 19us; 141us; 9us; 32768us; 8us; 129us; 9us; 125us; 12us; 118us; 14us; 142us; 26us; 121us; 34us; 149us; 36us; 147us; 37us; 148us; 38us; 117us; 10us; 32768us; 8us; 129us; 9us; 125us; 12us; 118us; 13us; 143us; 14us; 142us; 26us; 121us; 34us; 149us; 36us; 147us; 37us; 148us; 38us; 117us; 0us; 16417us; 0us; 16418us; 1us; 32768us; 13us; 146us; 0us; 16419us; 9us; 16421us; 8us; 129us; 9us; 125us; 12us; 118us; 14us; 142us; 26us; 121us; 34us; 149us; 36us; 147us; 37us; 148us; 38us; 117us; 0us; 16422us; 0us; 16423us; 1us; 32768us; 18us; 151us; 9us; 32768us; 8us; 129us; 9us; 125us; 12us; 118us; 14us; 142us; 26us; 121us; 34us; 149us; 36us; 147us; 37us; 148us; 38us; 117us; 9us; 32768us; 8us; 129us; 9us; 125us; 12us; 118us; 14us; 142us; 26us; 121us; 34us; 149us; 36us; 147us; 37us; 148us; 38us; 117us; 1us; 16427us; 10us; 154us; 9us; 32768us; 8us; 129us; 9us; 125us; 12us; 118us; 14us; 142us; 26us; 121us; 34us; 149us; 36us; 147us; 37us; 148us; 38us; 117us; 2us; 16431us; 16us; 16437us; 37us; 173us; 1us; 16432us; 19us; 160us; 2us; 16451us; 13us; 165us; 19us; 160us; 2us; 16451us; 13us; 170us; 19us; 160us; 2us; 16450us; 18us; 16452us; 19us; 160us; 4us; 32768us; 14us; 164us; 27us; 155us; 34us; 162us; 37us; 171us; 1us; 16433us; 16us; 16439us; 2us; 16434us; 16us; 16438us; 37us; 174us; 0us; 16435us; 4us; 32768us; 14us; 164us; 27us; 155us; 34us; 162us; 37us; 171us; 2us; 16436us; 16us; 16440us; 37us; 175us; 1us; 16437us; 37us; 173us; 1us; 16438us; 37us; 174us; 0us; 16439us; 4us; 32768us; 14us; 164us; 27us; 155us; 34us; 162us; 37us; 171us; 1us; 16440us; 37us; 175us; 1us; 16441us; 37us; 172us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 1us; 32768us; 13us; 177us; 1us; 32768us; 37us; 178us; 0us; 16446us; 1us; 32768us; 16us; 180us; 4us; 32768us; 14us; 169us; 27us; 166us; 34us; 167us; 37us; 171us; 1us; 16447us; 16us; 16449us; 0us; 16448us; 1us; 32768us; 18us; 184us; 4us; 32768us; 14us; 164us; 27us; 155us; 34us; 162us; 37us; 171us; 0us; 16453us; 4us; 16454us; 12us; 196us; 14us; 188us; 37us; 190us; 38us; 195us; 5us; 16455us; 12us; 196us; 14us; 188us; 36us; 214us; 37us; 190us; 38us; 195us; 9us; 32768us; 12us; 196us; 13us; 189us; 14us; 188us; 32us; 208us; 33us; 204us; 35us; 200us; 36us; 187us; 37us; 190us; 38us; 195us; 0us; 16456us; 0us; 16457us; 1us; 32768us; 13us; 192us; 0us; 16458us; 1us; 16477us; 13us; 194us; 0us; 16459us; 0us; 16460us; 9us; 32768us; 11us; 197us; 12us; 196us; 14us; 188us; 32us; 208us; 33us; 204us; 35us; 200us; 36us; 187us; 37us; 190us; 38us; 195us; 0us; 16461us; 1us; 32768us; 11us; 199us; 0us; 16462us; 4us; 32768us; 12us; 196us; 14us; 188us; 37us; 190us; 38us; 195us; 0us; 16463us; 0us; 16464us; 4us; 16465us; 12us; 196us; 14us; 188us; 37us; 190us; 38us; 195us; 1us; 32768us; 14us; 106us; 1us; 32768us; 19us; 206us; 8us; 32768us; 12us; 196us; 14us; 188us; 32us; 208us; 33us; 204us; 35us; 200us; 36us; 187us; 37us; 190us; 38us; 195us; 0us; 16466us; 8us; 32768us; 12us; 196us; 14us; 188us; 32us; 208us; 33us; 204us; 35us; 200us; 36us; 187us; 37us; 190us; 38us; 195us; 1us; 32768us; 24us; 210us; 0us; 16474us; 1us; 16467us; 15us; 218us; 0us; 16468us; 0us; 16469us; 5us; 16470us; 12us; 196us; 14us; 188us; 36us; 214us; 37us; 190us; 38us; 195us; 0us; 16471us; 0us; 16472us; 0us; 16473us; 1us; 32768us; 36us; 219us; 1us; 32768us; 37us; 220us; 1us; 32768us; 19us; 221us; 8us; 32768us; 12us; 196us; 14us; 188us; 32us; 208us; 33us; 204us; 35us; 200us; 36us; 187us; 37us; 190us; 38us; 195us; 0us; 16475us; 1us; 32768us; 18us; 224us; 8us; 32768us; 12us; 196us; 14us; 188us; 32us; 208us; 33us; 204us; 35us; 200us; 36us; 187us; 37us; 190us; 38us; 195us; 1us; 16476us; 18us; 16478us; 1us; 16479us; 10us; 228us; 0us; 16480us; 8us; 32768us; 12us; 196us; 14us; 188us; 32us; 208us; 33us; 204us; 35us; 200us; 36us; 187us; 37us; 190us; 38us; 195us; 0us; 16481us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 9us; 11us; 13us; 17us; 18us; 20us; 22us; 24us; 28us; 29us; 31us; 33us; 35us; 37us; 39us; 43us; 44us; 47us; 50us; 53us; 58us; 62us; 71us; 73us; 75us; 78us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 104us; 106us; 108us; 111us; 112us; 115us; 118us; 123us; 127us; 136us; 138us; 140us; 143us; 144us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 160us; 169us; 171us; 173us; 176us; 177us; 182us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 201us; 203us; 213us; 216us; 218us; 219us; 229us; 232us; 234us; 235us; 237us; 238us; 241us; 251us; 253us; 255us; 258us; 259us; 269us; 272us; 274us; 275us; 276us; 277us; 278us; 280us; 282us; 287us; 289us; 291us; 293us; 295us; 296us; 298us; 300us; 305us; 308us; 309us; 310us; 311us; 316us; 318us; 320us; 321us; 322us; 332us; 334us; 335us; 337us; 347us; 350us; 351us; 353us; 363us; 366us; 367us; 369us; 379us; 382us; 383us; 385us; 388us; 389us; 392us; 394us; 396us; 398us; 400us; 410us; 421us; 422us; 423us; 425us; 426us; 436us; 437us; 438us; 440us; 450us; 460us; 462us; 472us; 475us; 477us; 480us; 483us; 486us; 491us; 493us; 496us; 497us; 502us; 505us; 507us; 509us; 510us; 515us; 517us; 519us; 520us; 521us; 522us; 523us; 525us; 527us; 528us; 530us; 535us; 537us; 538us; 540us; 545us; 546us; 551us; 557us; 567us; 568us; 569us; 571us; 572us; 574us; 575us; 576us; 586us; 587us; 589us; 590us; 595us; 596us; 597us; 602us; 604us; 606us; 615us; 616us; 625us; 627us; 628us; 630us; 631us; 632us; 638us; 639us; 640us; 641us; 643us; 645us; 647us; 656us; 657us; 659us; 668us; 670us; 672us; 673us; 682us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 5us; 6us; 8us; 10us; 18us; 9us; 17us; 15us; 7us; 5us; 6us; 5us; 3us; 1us; 2us; 4us; 2us; 3us; 1us; 3us; 5us; 1us; 2us; 4us; 3us; 1us; 3us; 4us; 4us; 4us; 3us; 2us; 3us; 3us; 2us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 0us; 1us; 3us; 1us; 3us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 3us; 1us; 2us; 2us; 2us; 4us; 4us; 3us; 1us; 3us; 3us; 1us; 3us; 1us; 1us; 1us; 2us; 1us; 3us; 3us; 1us; 2us; 3us; 2us; 1us; 1us; 4us; 4us; 2us; 2us; 2us; 2us; 2us; 2us; 0us; 5us; 3us; 1us; 3us; 1us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 6us; 6us; 7us; 8us; 8us; 9us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 18us; 19us; 20us; 20us; 21us; 22us; 22us; 23us; 23us; 23us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 25us; 25us; 25us; 25us; 25us; 26us; 26us; 27us; 27us; 27us; 28us; 28us; 29us; 30us; 31us; 31us; 32us; 33us; 33us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 65535us; 65535us; 65535us; 16386us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16398us; 16399us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 16406us; 16407us; 16408us; 65535us; 65535us; 65535us; 16410us; 16411us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 16418us; 65535us; 16419us; 65535us; 16422us; 16423us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16435us; 65535us; 65535us; 65535us; 65535us; 16439us; 65535us; 65535us; 65535us; 16442us; 16443us; 16444us; 16445us; 65535us; 65535us; 16446us; 65535us; 65535us; 65535us; 16448us; 65535us; 65535us; 16453us; 65535us; 65535us; 65535us; 16456us; 16457us; 65535us; 16458us; 65535us; 16459us; 16460us; 65535us; 16461us; 65535us; 16462us; 65535us; 16463us; 16464us; 65535us; 65535us; 65535us; 65535us; 16466us; 65535us; 65535us; 65535us; 65535us; 16468us; 16469us; 65535us; 16471us; 16472us; 16473us; 65535us; 65535us; 65535us; 65535us; 16475us; 65535us; 65535us; 65535us; 65535us; 16480us; 65535us; 16481us; |]
let _fsyacc_reductions ()  =    [| 
# 463 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Synth.Lang.synth_problem)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 472 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "src/Parser.fsy"
                                    _1 
                   )
# 120 "src/Parser.fsy"
                 : Synth.Lang.synth_problem));
# 483 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_ctor_one)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "src/Parser.fsy"
                                  app_decl _5 (DDatatype(_2, [], _4)) 
                   )
# 129 "src/Parser.fsy"
                 : 'decls));
# 496 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_ctor_one)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "src/Parser.fsy"
                                  app_decl _6 (DDatatype(_3, [_2], _5)) 
                   )
# 131 "src/Parser.fsy"
                 : 'decls));
# 510 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tick_comma_one)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_ctor_one)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "src/Parser.fsy"
                                  app_decl _8 (DDatatype(_5, _3, _7)) 
                   )
# 133 "src/Parser.fsy"
                 : 'decls));
# 524 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'args_list_one)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "src/Parser.fsy"
                                  app_decl _10 (make_expr_decl false _2 (List.rev _3) _5 _7 [0;0;2]) 
                   )
# 137 "src/Parser.fsy"
                 : 'decls));
# 539 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'args_list_one)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _15 = (let data = parseState.GetInput(15) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _18 = (let data = parseState.GetInput(18) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "src/Parser.fsy"
                                  app_decl _18 (make_expr_decl false _2 (List.rev _3) _5 _15 [_8;_10;_12]) 
                   )
# 141 "src/Parser.fsy"
                 : 'decls));
# 557 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'let_rec_head)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'args_list_one)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "src/Parser.fsy"
                                  app_decl _9 (make_expr_decl true _1 (List.rev _2) _4 _6 [0;0;2]) 
                   )
# 145 "src/Parser.fsy"
                 : 'decls));
# 572 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'let_rec_head)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'args_list_one)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _17 = (let data = parseState.GetInput(17) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "src/Parser.fsy"
                                  app_decl _17 (make_expr_decl true _1 (List.rev _2) _4 _14 [_7;_9;_11]) 
                   )
# 149 "src/Parser.fsy"
                 : 'decls));
# 590 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'let_rec_head)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "src/Parser.fsy"
                                 {declarations=[]; synth_name=_1; synth_type=_3; synth_refn=Some _13; is_rec=true; complexity_bound = Some [_6;_8;_10]}
                   )
# 153 "src/Parser.fsy"
                 : 'decls));
# 606 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'let_rec_head)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "src/Parser.fsy"
                                 {declarations=[]; synth_name=_1; synth_type=_3; synth_refn=Some _5; is_rec=true; complexity_bound = None}
                   )
# 157 "src/Parser.fsy"
                 : 'decls));
# 619 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'let_rec_head)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "src/Parser.fsy"
                                 {declarations=[]; synth_name=_1; synth_type=_3; synth_refn=None; is_rec=true; complexity_bound = None}
                   )
# 162 "src/Parser.fsy"
                 : 'decls));
# 631 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'let_head)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "src/Parser.fsy"
                                  app_decl _6 (make_expr_decl false (fst _1) [] (snd _1) _3 [0;0;2])
                   )
# 166 "src/Parser.fsy"
                 : 'decls));
# 644 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'let_head)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "src/Parser.fsy"
                                 {declarations=[]; synth_name=fst _1; synth_type=snd _1; synth_refn=Some _3; is_rec=false; complexity_bound = None}
                   )
# 170 "src/Parser.fsy"
                 : 'decls));
# 656 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'let_head)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "src/Parser.fsy"
                                 {declarations=[]; synth_name=fst _1; synth_type=snd _1; synth_refn=None; is_rec=false; complexity_bound = None}
                   )
# 174 "src/Parser.fsy"
                 : 'decls));
# 667 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_ctor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "src/Parser.fsy"
                                                     [_1]     
                   )
# 177 "src/Parser.fsy"
                 : 'type_ctor_one));
# 678 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_ctor_one)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_ctor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "src/Parser.fsy"
                                                  _2 :: _1 
                   )
# 178 "src/Parser.fsy"
                 : 'type_ctor_one));
# 690 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "src/Parser.fsy"
                                                     (_2, _4)   
                   )
# 180 "src/Parser.fsy"
                 : 'type_ctor));
# 702 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "src/Parser.fsy"
                                                  (_2, HC.tunit)
                   )
# 181 "src/Parser.fsy"
                 : 'type_ctor));
# 713 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tick_comma)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "src/Parser.fsy"
                                                   List.rev (_3 :: _1) 
                   )
# 185 "src/Parser.fsy"
                 : 'tick_comma_one));
# 725 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "src/Parser.fsy"
                                                   [_1]        
                   )
# 189 "src/Parser.fsy"
                 : 'tick_comma));
# 736 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tick_comma)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "src/Parser.fsy"
                                                _3 :: _1    
                   )
# 190 "src/Parser.fsy"
                 : 'tick_comma));
# 748 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "src/Parser.fsy"
                                                         (_2, _4) 
                   )
# 193 "src/Parser.fsy"
                 : 'arg));
# 760 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "src/Parser.fsy"
                                               [_1]     
                   )
# 195 "src/Parser.fsy"
                 : 'args_list_one));
# 771 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'args_list_one)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "src/Parser.fsy"
                                            _2 :: _1 
                   )
# 196 "src/Parser.fsy"
                 : 'args_list_one));
# 783 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "src/Parser.fsy"
                                               (_2, _4) 
                   )
# 198 "src/Parser.fsy"
                 : 'let_head));
# 795 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "src/Parser.fsy"
                                         _3 
                   )
# 200 "src/Parser.fsy"
                 : 'let_rec_head));
# 806 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "src/Parser.fsy"
                                                              refn_of_int _1     
                   )
# 206 "src/Parser.fsy"
                 : 'refn));
# 817 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn_semi)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "src/Parser.fsy"
                                                           refn_of_list _2    
                   )
# 207 "src/Parser.fsy"
                 : 'refn));
# 828 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "src/Parser.fsy"
                                                           RENot(_3)          
                   )
# 208 "src/Parser.fsy"
                 : 'refn));
# 839 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn_comma)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "src/Parser.fsy"
                                                           REAnd(_3)          
                   )
# 209 "src/Parser.fsy"
                 : 'refn));
# 850 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn_comma)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "src/Parser.fsy"
                                                           REOr (_3)          
                   )
# 210 "src/Parser.fsy"
                 : 'refn));
# 861 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "src/Parser.fsy"
                                                           REArrA(_1, _3)     
                   )
# 211 "src/Parser.fsy"
                 : 'refn));
# 873 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "src/Parser.fsy"
                                                              REUnit             
                   )
# 212 "src/Parser.fsy"
                 : 'refn));
# 883 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "src/Parser.fsy"
                                                           _2                 
                   )
# 213 "src/Parser.fsy"
                 : 'refn));
# 894 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn_comma_one)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "src/Parser.fsy"
                                                           RETup(_2)          
                   )
# 214 "src/Parser.fsy"
                 : 'refn));
# 905 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "src/Parser.fsy"
                                                           RECtor(_1, _2)     
                   )
# 215 "src/Parser.fsy"
                 : 'refn));
# 917 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 216 "src/Parser.fsy"
                                                           RECtor(_1, REUnit) 
                   )
# 216 "src/Parser.fsy"
                 : 'refn));
# 928 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "src/Parser.fsy"
                                                           REBase(_1)         
                   )
# 217 "src/Parser.fsy"
                 : 'refn));
# 939 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "src/Parser.fsy"
                                                           REPTop(_1)         
                   )
# 218 "src/Parser.fsy"
                 : 'refn));
# 950 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn_comma)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "src/Parser.fsy"
                                                   List.rev (_3 :: _1) 
                   )
# 222 "src/Parser.fsy"
                 : 'refn_comma_one));
# 962 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "src/Parser.fsy"
                                                   [_1]        
                   )
# 226 "src/Parser.fsy"
                 : 'refn_comma));
# 973 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn_comma)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "src/Parser.fsy"
                                                _3 :: _1    
                   )
# 227 "src/Parser.fsy"
                 : 'refn_comma));
# 985 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn_semi2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "src/Parser.fsy"
                                                   List.rev _1 
                   )
# 231 "src/Parser.fsy"
                 : 'refn_semi));
# 996 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "src/Parser.fsy"
                                                []          
                   )
# 232 "src/Parser.fsy"
                 : 'refn_semi));
# 1006 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 234 "src/Parser.fsy"
                                                   [_1]        
                   )
# 234 "src/Parser.fsy"
                 : 'refn_semi2));
# 1017 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn_semi2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'refn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "src/Parser.fsy"
                                                _3 :: _1    
                   )
# 235 "src/Parser.fsy"
                 : 'refn_semi2));
# 1029 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "src/Parser.fsy"
                                                HC.tunit        
                   )
# 241 "src/Parser.fsy"
                 : 'typ));
# 1039 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "src/Parser.fsy"
                                             HC.tarr(_1, _3) 
                   )
# 242 "src/Parser.fsy"
                 : 'typ));
# 1051 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ_base)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "src/Parser.fsy"
                                             _1              
                   )
# 243 "src/Parser.fsy"
                 : 'typ));
# 1062 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "src/Parser.fsy"
                                             HC.tpoly(_1)    
                   )
# 244 "src/Parser.fsy"
                 : 'typ));
# 1073 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ_star_one)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "src/Parser.fsy"
                                             HC.ttup(_1)     
                   )
# 245 "src/Parser.fsy"
                 : 'typ));
# 1084 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "src/Parser.fsy"
                                             _2           
                   )
# 246 "src/Parser.fsy"
                 : 'typ));
# 1095 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "src/Parser.fsy"
                                                HC.tunit        
                   )
# 249 "src/Parser.fsy"
                 : 'typ_in_tup));
# 1105 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "src/Parser.fsy"
                                                HC.tpoly(_1)    
                   )
# 250 "src/Parser.fsy"
                 : 'typ_in_tup));
# 1116 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ_base)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "src/Parser.fsy"
                                             _1              
                   )
# 251 "src/Parser.fsy"
                 : 'typ_in_tup));
# 1127 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 252 "src/Parser.fsy"
                                             _2              
                   )
# 252 "src/Parser.fsy"
                 : 'typ_in_tup));
# 1138 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "src/Parser.fsy"
                                                   HC.tbase(_1, [])            
                   )
# 255 "src/Parser.fsy"
                 : 'typ_base));
# 1149 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "src/Parser.fsy"
                                                HC.tbase(_2, [HC.tbase(_1, [])]) 
                   )
# 256 "src/Parser.fsy"
                 : 'typ_base));
# 1161 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 257 "src/Parser.fsy"
                                                HC.tbase(_2, [HC.tunit])    
                   )
# 257 "src/Parser.fsy"
                 : 'typ_base));
# 1172 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 258 "src/Parser.fsy"
                                                HC.tbase(_2, [HC.tpoly _1]) 
                   )
# 258 "src/Parser.fsy"
                 : 'typ_base));
# 1184 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "src/Parser.fsy"
                                                HC.tbase(_4, [_2])          
                   )
# 259 "src/Parser.fsy"
                 : 'typ_base));
# 1196 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ_comma_one)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 260 "src/Parser.fsy"
                                                          HC.tbase(_4, _2)  
                   )
# 260 "src/Parser.fsy"
                 : 'typ_base));
# 1208 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ_star)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ_in_tup)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "src/Parser.fsy"
                                                       List.rev (_3 :: _1) 
                   )
# 263 "src/Parser.fsy"
                 : 'typ_star_one));
# 1220 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ_in_tup)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 265 "src/Parser.fsy"
                                                       [_1]                
                   )
# 265 "src/Parser.fsy"
                 : 'typ_star));
# 1231 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ_star)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ_in_tup)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 266 "src/Parser.fsy"
                                                    _3 :: _1            
                   )
# 266 "src/Parser.fsy"
                 : 'typ_star));
# 1243 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ_comma)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 270 "src/Parser.fsy"
                                                 List.rev (_3 :: _1) 
                   )
# 270 "src/Parser.fsy"
                 : 'typ_comma_one));
# 1255 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 274 "src/Parser.fsy"
                                                 [_1]        
                   )
# 274 "src/Parser.fsy"
                 : 'typ_comma));
# 1266 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ_comma)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 275 "src/Parser.fsy"
                                              _3 :: _1    
                   )
# 275 "src/Parser.fsy"
                 : 'typ_comma));
# 1278 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 280 "src/Parser.fsy"
                                              _1 
                   )
# 280 "src/Parser.fsy"
                 : 'expr));
# 1289 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 281 "src/Parser.fsy"
                                           _1 
                   )
# 281 "src/Parser.fsy"
                 : 'expr));
# 1300 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 282 "src/Parser.fsy"
                                           HC.ector(_1, HC.eunit) 
                   )
# 282 "src/Parser.fsy"
                 : 'expr));
# 1311 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 285 "src/Parser.fsy"
                                                              HC.eunit           
                   )
# 285 "src/Parser.fsy"
                 : 'expr_p2));
# 1321 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 286 "src/Parser.fsy"
                                                        HC.evar _1         
                   )
# 286 "src/Parser.fsy"
                 : 'expr_p2));
# 1332 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_comma_one)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 287 "src/Parser.fsy"
                                                        HC.etup _2         
                   )
# 287 "src/Parser.fsy"
                 : 'expr_p2));
# 1343 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 288 "src/Parser.fsy"
                                                        _2              
                   )
# 288 "src/Parser.fsy"
                 : 'expr_p2));
# 1354 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 289 "src/Parser.fsy"
                                                           expr_of_int  _1 
                   )
# 289 "src/Parser.fsy"
                 : 'expr_p2));
# 1365 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 290 "src/Parser.fsy"
                                                           expr_of_list [] 
                   )
# 290 "src/Parser.fsy"
                 : 'expr_p2));
# 1375 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_semi)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 291 "src/Parser.fsy"
                                                           expr_of_list _2 
                   )
# 291 "src/Parser.fsy"
                 : 'expr_p2));
# 1386 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 294 "src/Parser.fsy"
                                                              HC.eproj(_1, _2) 
                   )
# 294 "src/Parser.fsy"
                 : 'expr_p1));
# 1398 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ctor_chain)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 295 "src/Parser.fsy"
                                                        _1            
                   )
# 295 "src/Parser.fsy"
                 : 'expr_p1));
# 1409 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'app_chain)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 296 "src/Parser.fsy"
                                                        _1            
                   )
# 296 "src/Parser.fsy"
                 : 'expr_p1));
# 1420 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 297 "src/Parser.fsy"
                                                        HC.efun {argl=fst _2; arg_type=snd _2; body=_4; complexity=[0;0;3]}
                   )
# 297 "src/Parser.fsy"
                 : 'expr_p1));
# 1432 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'branches)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 298 "src/Parser.fsy"
                                                           HC.ematch(_2, _4)  
                   )
# 298 "src/Parser.fsy"
                 : 'expr_p1));
# 1444 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p2)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 301 "src/Parser.fsy"
                                               HC.eapp(_1, _2) 
                   )
# 301 "src/Parser.fsy"
                 : 'app_chain));
# 1456 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'app_chain)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 302 "src/Parser.fsy"
                                            HC.eapp(_1, _2) 
                   )
# 302 "src/Parser.fsy"
                 : 'app_chain));
# 1468 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 304 "src/Parser.fsy"
                                               HC.ector(_1, HC.ector(_2, HC.eunit))
                   )
# 304 "src/Parser.fsy"
                 : 'ctor_chain));
# 1480 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 305 "src/Parser.fsy"
                                               HC.ector(_1, _2)
                   )
# 305 "src/Parser.fsy"
                 : 'ctor_chain));
# 1492 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ctor_chain)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 306 "src/Parser.fsy"
                                            HC.ector(_1, _2)
                   )
# 306 "src/Parser.fsy"
                 : 'ctor_chain));
# 1504 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'branches)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'branch)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 310 "src/Parser.fsy"
                                                  _2 :: _1 
                   )
# 310 "src/Parser.fsy"
                 : 'branches));
# 1516 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 311 "src/Parser.fsy"
                                               []       
                   )
# 311 "src/Parser.fsy"
                 : 'branches));
# 1526 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 313 "src/Parser.fsy"
                                                     (_2, _3, _5)
                   )
# 313 "src/Parser.fsy"
                 : 'branch));
# 1539 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_comma)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 317 "src/Parser.fsy"
                                                   List.rev (_3 :: _1) 
                   )
# 317 "src/Parser.fsy"
                 : 'expr_comma_one));
# 1551 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 321 "src/Parser.fsy"
                                                   [_1]        
                   )
# 321 "src/Parser.fsy"
                 : 'expr_comma));
# 1562 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_comma)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 322 "src/Parser.fsy"
                                                _3 :: _1    
                   )
# 322 "src/Parser.fsy"
                 : 'expr_comma));
# 1574 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_semi2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 326 "src/Parser.fsy"
                                                   List.rev _1 
                   )
# 326 "src/Parser.fsy"
                 : 'expr_semi));
# 1585 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 328 "src/Parser.fsy"
                                                   [_1]        
                   )
# 328 "src/Parser.fsy"
                 : 'expr_semi2));
# 1596 "src/Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_semi2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 329 "src/Parser.fsy"
                                                _3 :: _1    
                   )
# 329 "src/Parser.fsy"
                 : 'expr_semi2));
|]
# 1609 "src/Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 42;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Synth.Lang.synth_problem =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
